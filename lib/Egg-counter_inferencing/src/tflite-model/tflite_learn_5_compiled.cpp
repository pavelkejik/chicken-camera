/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 12.05.2025 20:29:43

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 803024;
#else
constexpr int kTensorArenaSize = 802000;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,180,180,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  1, 1, 
  1, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[2] = { 22069, -28269, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const TfArray<2, float> quant3_scale = { 2, { 0.00024271248548757285, 0.00018802232807502151, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[2*1*1*32] = { 
  /* [0][0][][] */ 35,-38,-47,127,12,-2,-35,43,81,-14,-11,-18,-22,53,-58,25,74,-76,42,-68,103,51,47,-57,-56,-49,-43,124,7,-24,95,85, 
  /* [1][0][][] */ 58,75,75,-102,-118,75,-9,14,-37,-12,29,103,113,41,40,-1,-39,3,-127,-89,-79,37,34,110,88,69,-46,-41,98,-111,-123,-23, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant4_scale = { 2, { 0.0046864696778357029, 0.0036304723471403122, } };
const TfArray<2, int> quant4_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[32] = { 285, 233, 218, 1983, 1579, 247, -305, 261, -208, -390, -152, -4, 239, 125, 247, -174, -148, -602, 2565, -318, 18, 300, 183, 257, 255, -293, -362, 2432, -495, 239, 1514, 202, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<32, float> quant5_scale = { 32, { 4.3198950152145699e-05, 4.3471954995766282e-05, 4.7581503167748451e-05, 5.2246283303247765e-05, 6.0214362747501582e-05, 4.3052947148680687e-05, 4.1593961213948205e-05, 4.3325584556441754e-05, 4.8310448619304225e-05, 4.3408581404946744e-05, 4.9661441153148189e-05, 4.08855194109492e-05, 4.5128395868232474e-05, 4.5674270950257778e-05, 4.7552097385050729e-05, 7.0841371780261397e-05, 6.4318417571485043e-05, 8.6370397184509784e-05, 6.3154024246614426e-05, 4.1291244997410104e-05, 6.9872250605840236e-05, 3.9724181988276541e-05, 4.2089694034075364e-05, 4.6980876504676417e-05, 4.5881028199801221e-05, 4.6362809371203184e-05, 4.1545918065821752e-05, 7.1440445026382804e-05, 4.2757299524964765e-05, 4.5662211050512269e-05, 7.7447497460525483e-05, 5.262657577986829e-05, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[32*1*1*96] = { 
  /* [0][0][][] */ -43,-84,110,16,100,-13,-94,-87,68,-94,-102,7,60,11,-28,55,-49,-31,-57,-49,-65,-102,9,114,-105,12,87,-51,114,-1,-14,-91,85,-71,-87,68,-101,-73,-78,38,44,-87,-88,101,57,-100,112,-12,-3,-71,-24,67,-66,-108,-86,110,28,73,127,-119,-69,89,-69,51,-1,-1,78,72,57,104,93,-107,106,-93,46,80,-99,20,-53,37,60,21,99,-32,-58,-38,-78,114,29,119,-8,-107,2,50,43,27, 
  /* [1][0][][] */ -65,-4,-62,6,-31,78,28,21,85,-96,-106,118,73,-24,34,67,118,-37,45,125,-45,-5,44,37,44,19,-29,105,17,5,108,-76,62,91,-2,31,61,68,-2,-52,-85,8,-13,-95,-28,44,-21,-45,-24,-106,122,47,20,17,-70,-42,29,107,71,61,-51,124,-75,-73,-48,14,84,15,108,38,27,16,-105,101,-44,45,90,-37,-36,81,-71,89,-44,-127,31,120,-59,-57,77,84,97,33,73,73,36,2, 
  /* [2][0][][] */ 34,0,-47,92,-13,-55,71,97,-84,82,-35,117,89,-11,84,-99,-43,-21,39,57,-85,-13,108,28,-14,73,105,6,-56,72,81,75,-60,-29,-77,-94,-69,93,106,-14,-127,-68,22,-4,-70,113,-14,-61,92,15,89,-91,-33,-4,27,23,-61,93,-47,-16,-10,63,-41,68,91,22,51,54,-81,70,17,-59,38,-59,33,23,-41,-15,9,16,42,-80,-3,-50,3,-83,-9,-21,80,105,-18,14,-49,-89,-34,-54, 
  /* [3][0][][] */ 83,48,65,-7,-30,58,-44,34,61,28,93,-28,85,118,68,49,71,117,-50,28,127,-51,-22,-111,28,-61,-82,126,64,-43,89,33,-18,7,6,17,-75,8,49,37,15,-26,-94,51,99,55,-44,-43,77,-24,50,46,101,108,89,-74,-67,-93,-89,-6,-49,56,10,98,63,13,-28,26,-7,-94,14,114,40,-80,99,4,56,80,109,-11,-48,-78,40,99,63,93,-18,-88,-13,91,48,-77,111,-29,-61,92, 
  /* [4][0][][] */ 53,115,17,47,3,10,63,16,49,81,24,9,33,0,11,0,-14,25,-37,18,101,-42,60,10,-8,29,37,-13,-18,80,-45,4,78,118,24,-29,-43,6,-60,32,-13,-36,-69,-10,45,81,20,50,32,4,25,-21,-70,114,-37,13,53,-56,-9,36,18,-25,2,-34,-21,78,33,27,60,-87,-60,-23,-28,9,127,76,52,-20,19,-26,18,-17,-63,-11,16,71,57,-8,-25,13,68,33,48,106,-39,1, 
  /* [5][0][][] */ 88,-127,84,90,46,-116,18,68,110,-111,-4,-57,29,100,44,38,70,63,-64,105,33,52,24,-19,-95,-62,-5,-92,54,30,24,-110,-36,-10,-64,21,-106,-29,57,32,-112,-50,49,97,-28,30,42,-44,-111,85,33,20,47,-48,42,-16,108,56,-44,-60,37,-60,28,-67,-23,79,-19,3,77,10,112,-64,-41,85,-24,-73,16,-41,16,90,113,46,35,96,-79,85,2,46,67,-95,121,96,-29,9,80,-75, 
  /* [6][0][][] */ 14,-46,113,74,-90,-71,-5,63,-18,-91,5,-94,85,53,116,-126,38,-3,-7,102,-82,-127,109,57,-66,-89,-13,-61,-32,-120,44,-85,-96,-125,-51,-112,-13,37,-115,79,83,55,20,-18,-120,105,-95,-51,-89,17,-31,-68,58,-38,92,-32,5,-12,-73,122,-101,-1,66,-77,-56,68,99,-50,77,-10,-112,-8,53,-75,-97,-45,-85,-108,-61,-33,31,-32,41,-23,-78,-92,-46,-99,84,94,95,14,-53,-69,75,-32, 
  /* [7][0][][] */ 108,54,-38,-41,-73,112,-21,13,127,6,-86,8,52,-87,48,78,54,22,8,115,63,39,-6,85,-60,108,44,58,-75,111,-26,33,27,17,67,107,-100,92,-1,-24,73,-77,89,71,57,7,95,-107,50,-57,-102,-71,-24,53,26,26,123,-88,5,-51,15,-9,87,-113,-68,-67,78,17,-109,22,70,92,85,28,65,67,-59,59,-91,48,94,-39,-13,-74,86,38,-106,103,86,12,86,62,-63,-50,7,-57, 
  /* [8][0][][] */ 19,62,-48,-88,46,26,-60,-29,3,30,43,71,-5,-42,-78,-68,-70,81,-63,7,26,-21,63,88,-111,83,30,65,-67,18,-95,124,82,-13,35,-1,95,-5,-25,50,84,85,-107,-108,-16,-32,-32,88,20,-56,-63,2,-66,63,-33,-105,48,87,-95,127,94,30,46,88,-37,-26,-24,121,-74,37,21,-7,59,53,3,20,-48,87,69,58,24,69,-107,-68,17,32,57,-43,31,-38,-80,79,-61,-73,-43,49, 
  /* [9][0][][] */ 4,43,105,38,75,-103,-47,-127,35,46,-13,47,-33,-87,-102,-34,-1,-2,-106,-76,-2,93,-115,-111,102,-14,-22,22,-19,-63,-101,111,58,7,20,-25,-84,7,-45,-51,74,-76,45,-96,72,11,-112,43,55,-9,-88,-50,64,-29,-78,94,77,-64,-25,7,-94,103,77,-84,-95,13,97,50,-40,93,99,-95,-2,71,-113,-100,-87,-126,-46,96,25,18,93,55,-56,-102,26,-22,93,26,-39,105,115,0,59,-46, 
  /* [10][0][][] */ -64,40,78,-57,-13,87,82,33,23,29,11,-51,88,64,-30,-4,-28,67,-85,-52,-31,18,51,-55,29,43,-92,-127,-44,55,-79,-81,72,76,103,61,-29,6,-24,42,-50,92,-93,-42,-89,-59,-1,-50,-7,-18,38,-14,57,-32,-53,-30,-93,-9,32,-63,-5,72,74,35,105,-89,-83,-48,15,-14,-79,-59,76,59,-75,74,-20,60,51,18,68,-5,51,65,-96,54,89,-23,18,3,-13,-55,-57,-64,-43,-59, 
  /* [11][0][][] */ 114,-13,-18,109,121,50,45,35,105,102,-87,121,-5,-92,38,-77,-55,-105,74,43,23,77,22,-116,-114,-101,-11,41,81,-16,27,-22,-95,-79,54,47,-64,79,-21,-45,-53,97,-83,-16,-36,-61,-96,-93,77,104,126,29,-100,-124,27,26,-78,-54,-33,-127,-97,110,74,6,32,69,-53,18,96,63,-86,-70,41,110,-103,38,-77,35,-72,89,-112,-28,-76,-104,42,-90,12,-50,-119,-15,8,-110,-100,-51,-66,-42, 
  /* [12][0][][] */ 5,25,-44,9,90,7,-41,45,-68,61,-15,26,-35,14,55,-72,-85,-28,-37,-69,28,-8,24,102,-55,-44,107,-95,95,14,-25,101,-79,-77,-37,19,7,-63,-6,52,87,40,-96,-36,-14,-71,-29,120,-42,-127,-64,86,44,-62,-70,89,-16,-48,61,46,62,117,-11,57,115,12,-35,88,59,106,49,75,87,118,-11,-6,-26,42,-106,-81,-47,103,52,-1,-31,36,60,119,-89,-99,92,49,87,-29,36,79, 
  /* [13][0][][] */ 97,-79,101,94,89,108,70,76,77,-94,15,-20,88,67,69,-41,-109,-67,-59,30,69,-26,111,-43,-59,41,14,10,-81,-77,83,27,38,90,-17,38,-71,-25,41,73,-79,64,-45,12,-35,34,-2,-25,28,84,-22,-109,-87,-15,104,-76,-45,32,-15,-86,-18,116,-77,16,-45,-74,-76,62,-29,-7,95,6,-83,37,-66,-41,-101,65,84,-60,54,-91,95,4,-81,-107,91,127,-11,-43,-73,54,98,-68,73,-4, 
  /* [14][0][][] */ -59,-110,91,74,81,-27,-23,-92,-66,-26,60,92,-13,-68,-66,-75,-32,-50,19,33,-40,30,11,69,-91,-64,-13,30,-93,-105,-54,18,97,-33,-20,7,98,114,44,-87,-35,-98,44,83,68,-93,75,-65,105,4,79,35,101,-75,-8,25,-42,18,59,70,-10,-61,-57,73,-70,-26,76,-127,-71,-69,-66,91,15,85,50,-71,63,-87,55,42,52,-11,-97,-62,-97,-68,-87,104,100,12,89,-36,63,71,-8,64, 
  /* [15][0][][] */ 15,10,-22,40,51,-47,42,-62,36,-5,-34,-4,59,-1,-53,-70,48,5,-59,10,29,17,37,59,45,44,18,56,9,35,29,-54,4,14,-42,0,-45,63,65,-47,24,62,-34,-16,12,-50,-36,-54,-5,-33,-5,22,-66,-14,-32,-12,43,27,-36,127,-29,-46,6,57,-27,69,-45,31,-34,-2,34,-47,6,-14,32,-64,-5,29,62,42,-54,29,-69,-29,-79,-27,-61,21,51,41,-72,-30,35,75,-65,64, 
  /* [16][0][][] */ -40,30,62,-47,23,78,-27,19,32,29,-66,35,-17,-33,-43,-40,64,52,42,37,75,54,-32,27,-27,38,-55,44,-72,11,18,19,-71,62,33,39,-30,31,-40,-55,34,-32,41,60,39,65,59,-15,-38,-55,-1,82,-34,127,41,23,20,53,37,30,74,64,32,38,30,26,-29,85,26,58,-28,-10,14,55,40,62,-12,60,-74,-14,4,-59,34,20,5,64,61,2,54,7,-12,68,55,-7,-59,13, 
  /* [17][0][][] */ 19,-98,41,59,0,-76,-82,-36,-8,-41,-9,56,73,31,-13,-3,37,-5,38,79,-75,-19,31,4,5,-13,-11,-16,63,-52,7,-4,-30,-27,30,-28,0,54,-35,28,-76,-26,14,-18,1,-7,70,-40,38,0,9,-26,15,-17,8,-15,-97,66,-18,-127,-10,39,-4,59,-20,-70,6,-105,-38,25,69,0,25,-42,-46,-15,74,-7,-4,-11,23,8,-28,-99,-51,22,51,-8,-37,7,-36,-22,-16,7,-8,-2, 
  /* [18][0][][] */ -56,123,116,-45,18,-81,-28,28,2,35,-28,-68,-20,61,50,16,-26,7,15,-8,96,-11,35,-80,39,-43,-39,113,35,66,9,48,58,29,-61,-43,-29,56,7,28,1,51,-82,51,-40,33,-8,16,19,29,59,52,-58,93,-1,49,-18,17,-23,-48,65,99,40,57,-34,-33,10,127,74,-111,-50,110,-45,-16,27,-29,45,11,19,-20,-11,-2,-29,-58,109,27,51,32,9,5,16,79,85,14,38,27, 
  /* [19][0][][] */ 18,31,74,36,56,-91,97,90,94,-73,26,-18,-102,33,-61,59,71,-116,106,56,-25,83,-61,9,76,-86,25,-71,-98,-124,-78,44,81,-83,30,-2,5,-75,-62,-109,32,-121,-89,8,-93,26,76,-100,-53,39,-44,47,-40,46,1,-14,21,97,-7,-21,54,-61,101,59,-77,-6,-31,12,-11,52,74,-56,-68,-127,-61,-85,-27,-120,13,107,57,-122,-35,81,-90,-9,4,-6,91,29,-7,62,-37,115,69,-53, 
  /* [20][0][][] */ 12,75,44,57,-52,69,26,34,11,12,-37,-3,-3,61,35,-40,-33,-19,-39,-21,18,-21,-48,-47,45,-36,-66,31,14,16,-20,90,65,50,-9,40,23,-21,-7,-67,-36,-19,-58,-60,-16,-40,-45,62,47,-50,-62,33,28,127,34,0,61,45,56,75,67,-24,-31,-19,-18,-20,-30,34,-33,-49,-43,51,-39,-54,23,15,66,44,67,64,51,8,49,-9,40,73,-10,43,16,59,19,40,29,29,0,2, 
  /* [21][0][][] */ 88,47,81,-105,109,-87,76,31,5,-65,-76,48,7,43,-54,-96,-105,-31,38,-9,120,-50,81,-85,70,-87,-28,80,21,6,-4,-40,11,6,-95,-112,127,111,-117,-29,-26,9,38,-14,-101,-82,-86,107,-45,-93,2,84,44,9,-92,30,-32,61,-48,127,64,-80,5,-11,93,13,-32,-98,-114,3,72,90,39,-16,81,75,-115,-25,72,119,20,110,43,-77,29,-99,76,-82,-112,89,119,-120,-73,-82,82,-25, 
  /* [22][0][][] */ 15,-75,-76,-96,89,-53,107,63,-94,76,-84,-121,110,-119,-127,-83,45,88,-113,-57,93,-83,36,35,105,-13,-113,105,-57,-79,-79,-126,46,45,19,3,10,-10,-59,-113,-23,-6,7,101,64,-111,88,-16,-76,-100,9,-17,-63,-102,-45,33,-24,-33,-19,-52,119,-77,-87,-117,-66,8,-112,-51,102,110,-20,-3,-70,14,69,-86,54,-45,70,102,113,-104,-72,-117,82,96,104,-28,-58,39,-63,57,3,8,-29,111, 
  /* [23][0][][] */ 51,-123,13,60,95,-104,-4,-81,54,-70,78,80,24,-97,29,-35,89,-31,-91,98,87,-74,101,-23,-8,-12,86,19,70,44,75,-45,-33,30,23,35,97,0,-92,16,-123,2,17,-98,-58,-77,111,32,52,-118,-73,-58,82,-122,-42,88,-74,-12,100,25,-98,-71,-60,-5,38,16,-99,-127,63,-5,110,-59,0,-25,-31,-88,47,-13,89,113,-42,-42,26,-109,88,10,111,-13,-83,41,100,2,91,-64,-21,83, 
  /* [24][0][][] */ -79,-84,-83,-54,-70,-104,-72,-66,69,117,84,61,120,61,-15,-108,-64,42,34,-39,97,-73,-43,-21,58,-25,87,46,108,53,20,-64,1,1,54,37,-37,-72,75,-5,-88,-101,111,7,27,-26,53,78,-85,-66,-4,-7,81,-4,75,-59,5,84,38,1,92,15,21,96,-79,76,-31,-106,-83,64,-41,-11,-27,48,95,88,68,-63,-93,-70,-62,-80,-50,-127,6,54,-2,-74,20,-100,10,-58,-18,15,-66,37, 
  /* [25][0][][] */ -94,-70,-77,-11,82,-74,-106,54,31,-112,-44,27,65,-17,-107,-27,-66,59,22,-100,50,65,-9,-50,8,-63,-90,29,64,-89,31,93,82,-116,39,51,96,-63,-22,-8,-101,76,-94,5,94,27,52,30,-92,66,-71,-10,42,-42,-58,9,-38,52,-94,57,114,42,32,40,-1,58,-21,-27,-95,0,-26,-107,32,-110,64,12,65,73,7,17,45,31,-46,61,-82,-57,-94,-83,-33,-44,83,23,-127,-31,-23,-84, 
  /* [26][0][][] */ 71,-85,-27,-18,-106,-1,-13,-23,-117,-127,105,87,-83,-50,6,-19,112,26,-89,-74,9,74,99,10,47,62,8,47,9,1,-99,3,-35,-51,-106,-110,-73,82,-60,107,-114,103,53,29,-79,69,-44,101,-22,37,-11,109,6,16,-10,-111,90,62,51,41,-3,-104,66,-26,114,-14,-66,67,-90,77,85,93,79,-105,-94,4,43,-117,-104,6,-34,77,80,-90,81,-4,-51,8,-88,114,8,14,-56,114,46,84, 
  /* [27][0][][] */ 34,80,-14,-53,-48,-24,19,11,52,67,88,-100,-14,69,62,52,20,34,41,-32,-3,38,15,-28,-31,65,-99,49,63,76,-15,35,84,98,-29,-30,-50,-11,-38,48,-18,68,2,96,119,58,19,69,70,100,61,22,-39,63,20,-18,79,-6,-73,6,40,3,40,70,27,38,-30,127,57,-26,-61,52,51,-25,79,24,59,-32,96,92,73,-1,77,15,-8,18,-1,38,43,73,18,-22,59,58,83,77, 
  /* [28][0][][] */ 77,-16,77,34,-126,-75,-110,-86,-42,-119,47,61,-92,-98,-7,88,82,99,-81,64,-34,13,-119,-85,-118,70,-95,-73,-84,-86,-13,-32,-113,4,69,61,12,-117,-53,20,91,30,-101,39,-116,-20,3,37,13,-75,-87,-41,-97,12,42,28,46,-25,70,40,-14,-55,-108,-7,47,61,-33,69,-91,17,-115,-54,58,32,-18,-111,-127,-67,-96,35,-85,-103,99,-34,49,-122,55,-85,-115,-72,-48,-78,-50,44,-100,-78, 
  /* [29][0][][] */ 64,90,56,-50,-80,22,-99,-1,95,-13,-72,-101,99,-77,-38,-36,-101,98,20,-64,-58,-29,48,-2,-32,18,-44,-20,-93,6,100,14,50,27,-76,-29,-13,95,-8,82,59,108,-48,79,0,102,-59,-23,16,12,57,-74,66,-5,105,38,-54,48,-51,127,-111,93,-71,-47,-56,-30,49,121,108,-88,32,-63,104,66,62,32,107,-64,-24,31,-5,-73,-10,-68,70,118,39,70,-20,97,80,71,-73,40,3,59, 
  /* [30][0][][] */ 26,31,-9,24,-20,38,4,6,82,-2,51,-32,-51,21,41,25,-18,27,39,-57,52,-52,-56,3,-30,23,-48,108,-1,-7,-29,35,-23,4,-65,1,13,-12,13,38,108,11,-18,127,81,-17,44,31,-41,62,60,17,58,66,4,51,-6,-25,-51,16,-26,24,0,7,-48,22,-43,96,-12,45,19,5,-47,46,73,-9,-3,-40,-16,-26,32,25,-68,39,-48,70,-66,68,25,-8,56,52,16,54,48,-28, 
  /* [31][0][][] */ 98,-36,34,83,45,68,-14,-74,-18,-10,-23,-88,88,-69,-9,98,-52,-67,17,40,68,53,-26,85,35,-71,28,36,-58,-42,45,127,25,63,-74,16,78,-24,-52,-93,75,-53,-27,34,8,-42,-40,20,59,73,81,-18,-94,24,-62,17,-80,57,0,125,-31,10,92,-59,58,126,-24,-7,94,-101,-98,22,-78,-35,18,13,-47,-40,45,75,-60,-20,44,68,81,83,-82,14,21,-42,-62,-43,39,115,8,-19, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0018359553068876266, 0.0018475580727681518, 0.0020222137682139874, 0.0022204669658094645, 0.002559110289439559, 0.0018297502538189292, 0.0017677433788776398, 0.0018413373036310077, 0.0020531939808279276, 0.0018448646878823638, 0.0021106111817061901, 0.0017376345349475741, 0.0019179568625986576, 0.0019411564571782947, 0.002020964166149497, 0.0030107581987977028, 0.0027335325721651316, 0.0036707418039441109, 0.0026840460486710072, 0.0017548778560012579, 0.0029695704579353333, 0.0016882776981219649, 0.0017888119909912348, 0.0019966871477663517, 0.0019499437185004354, 0.0019704194273799658, 0.0017657014541327953, 0.0030362189281731844, 0.0018171851988881826, 0.0019406439969316125, 0.0032915184274315834, 0.0022366293705999851, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[96] = { 864, 425, 3051, 4405, 3235, -1456, 3169, -1070, -2066, -536, 3859, -1831, 3093, 4462, 1551, 1745, -558, -398, -1425, 3793, 2903, -536, 1762, -481, -1033, 2828, 1042, 1515, 6404, 1825, 2743, 1062, 1070, 3538, 4454, 2296, -431, 2382, 1986, -3335, -102, 920, -78, 2223, -1144, 361, -1285, 757, -5397, 1465, 920, -2704, 4596, 231, 1516, 1187, 994, 1867, -509, -949, 191, 1262, 420, 3276, 4302, 2501, 1972, 6430, 3003, -607, 2277, 5331, 2844, -1088, 4606, 5124, 881, -4417, 706, 947, 8159, 1328, -500, -1382, 1378, 723, 1232, -2189, 2811, -356, 2778, 1167, 112, -2486, -170, 1234, };
const TfArray<1, int> tensor_dimension7 = { 1, { 96 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00023371291172225028, 0.00032246622140519321, 0.00018790879403240979, 0.00017331949493382126, 0.00019485001394059509, 0.00026724714552983642, 0.00018242094665765762, 0.00023973688075784594, 0.00019145237456541508, 0.00027656278689391911, 0.00015675762551836669, 0.00023563679133076221, 0.00018374768842477351, 0.00013981599477119744, 0.00021306863345671445, 0.00023143604630604386, 0.00030700696515850723, 0.00023086238070391119, 0.00021665554959326982, 0.00016428399248979986, 0.00017464435950387269, 0.00024403928546234965, 0.00020674026745837182, 0.00021241229842416942, 0.00023501267423853278, 0.00020980426052119583, 0.00027990454691462219, 0.00026066435384564102, 0.0001128628064179793, 0.00023830094141885638, 0.0001964994880836457, 0.00028862798353657126, 0.00027311244048178196, 0.00020944519201293588, 0.00013813159603159875, 0.00020913503249175847, 0.00025824326439760625, 0.00018486054614186287, 0.00018482124141883105, 0.00016046510427258909, 0.00024068569473456591, 0.00021963720791973174, 0.00029231928056105971, 0.00013698793190997094, 0.00019763641466852278, 0.00017373832815792412, 0.00018772482872009277, 0.00018266540428157896, 0.00012404736480675638, 0.00018913421081379056, 0.00028789931093342602, 0.00019582318782340735, 0.0001643405994400382, 0.00027752821915782988, 0.00022066605743020773, 0.00021366986038628966, 0.00018778769299387932, 0.00020749817485921085, 0.00028356039547361434, 0.00018664126400835812, 0.00022772795637138188, 0.00022902525961399078, 0.00020677054999396205, 0.00019820350280497223, 0.00015739929222036153, 0.00017942747217603028, 0.00019373123359400779, 0.00013942924852017313, 0.00022626107966061682, 0.00023194805544335395, 0.00021220516646280885, 0.00013141585804987699, 0.00015569660172332078, 0.00021338115038815886, 0.00018433708464726806, 0.0001542313548270613, 0.00016190971655305475, 0.00014297284360509366, 0.00019127290579490364, 0.00021130961249582469, 0.00010324382310500368, 0.00020025217963848263, 0.00018248021660838276, 0.0002652941329870373, 0.00017559163097757846, 0.00022268258908297867, 0.00022766704205423594, 0.00017784272495191544, 0.00022039486793801188, 0.00021694031602237374, 0.0002196031273342669, 0.00018684385577216744, 0.00020677977590821683, 0.00015397077368106693, 0.00024120075977407396, 0.00025397498393431306, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[96*1*1*16] = { 
  /* [0][0][][] */ -13,101,-80,30,43,-31,91,79,-54,1,37,-82,75,127,-67,21, 
  /* [1][0][][] */ -24,5,-44,3,-3,50,30,-127,38,-15,-72,-49,13,-43,-72,4, 
  /* [2][0][][] */ -20,-23,28,69,18,47,-106,127,-23,-2,56,-61,-24,-63,-42,57, 
  /* [3][0][][] */ 87,-99,85,-5,-1,-41,-28,127,-23,64,80,58,-4,53,-5,23, 
  /* [4][0][][] */ -41,-24,-4,51,-82,8,-31,-127,6,-5,40,-9,35,45,96,126, 
  /* [5][0][][] */ 127,22,-29,-24,-84,22,19,72,11,-13,43,82,122,29,-86,-1, 
  /* [6][0][][] */ 19,-36,-54,-50,-72,1,3,-56,-46,-48,-15,33,87,48,127,-4, 
  /* [7][0][][] */ -53,38,-37,-86,-5,-54,-78,22,-97,48,-104,-71,-127,-36,24,80, 
  /* [8][0][][] */ 54,47,74,13,54,29,77,15,72,-27,32,6,-127,-27,-67,6, 
  /* [9][0][][] */ -35,65,21,-52,-23,-7,41,-24,-20,39,-39,7,37,127,37,11, 
  /* [10][0][][] */ 54,40,-60,55,-46,-13,63,-32,-80,-45,-62,-118,-127,-72,37,100, 
  /* [11][0][][] */ 41,1,65,15,-6,-34,6,93,-74,28,-16,8,-8,-8,47,127, 
  /* [12][0][][] */ -54,-26,13,7,29,-5,114,40,-57,31,4,-8,-7,81,-52,127, 
  /* [13][0][][] */ 10,49,24,47,101,50,97,121,-43,95,-127,-83,47,71,-108,-53, 
  /* [14][0][][] */ -127,117,12,-9,-6,-2,56,10,-44,38,108,-2,-89,12,-55,56, 
  /* [15][0][][] */ -9,-12,-127,-48,72,-37,-83,-29,-20,-25,-27,-67,-7,-76,-49,40, 
  /* [16][0][][] */ 111,-14,3,-14,32,-26,46,-21,-39,6,127,44,49,8,-29,12, 
  /* [17][0][][] */ 15,24,-32,-103,-15,-57,127,-123,8,-28,-58,30,36,81,8,45, 
  /* [18][0][][] */ 32,127,-18,-52,56,-72,-25,-53,-47,127,-36,-9,-31,61,-11,-35, 
  /* [19][0][][] */ -62,-109,105,-77,41,-127,19,-27,42,42,92,100,19,-8,50,-17, 
  /* [20][0][][] */ -25,93,59,12,16,4,28,-22,80,-3,98,-24,-127,-44,-52,-15, 
  /* [21][0][][] */ -64,37,18,15,62,37,83,53,-127,52,-27,13,-15,21,-45,-30, 
  /* [22][0][][] */ 13,-89,49,15,23,-127,103,1,24,-48,-34,-68,38,-84,-52,-43, 
  /* [23][0][][] */ -52,-103,51,72,33,-26,6,-52,20,-31,75,10,12,67,64,127, 
  /* [24][0][][] */ 0,-1,22,76,48,19,-53,-127,61,13,-43,13,2,4,-24,-29, 
  /* [25][0][][] */ -10,32,16,-50,-29,-1,18,-31,-31,50,-41,-13,38,127,28,2, 
  /* [26][0][][] */ -63,78,10,23,35,-94,-9,-36,14,26,9,79,7,3,-80,127, 
  /* [27][0][][] */ -19,-127,-52,7,-70,102,0,-59,13,-37,53,-32,41,-47,-108,-31, 
  /* [28][0][][] */ -37,0,43,85,31,7,-37,-127,-114,53,106,-9,72,7,-47,-20, 
  /* [29][0][][] */ -127,103,-17,-21,-32,19,-124,-73,-50,-24,1,1,10,-62,-113,69, 
  /* [30][0][][] */ 52,73,-44,84,-100,-98,-80,-18,-30,-1,12,-107,127,28,-23,100, 
  /* [31][0][][] */ 102,13,-64,-33,-63,30,127,36,-51,-22,57,46,30,12,-32,2, 
  /* [32][0][][] */ -30,-15,127,-5,-28,81,79,20,-21,-18,-12,18,6,73,68,17, 
  /* [33][0][][] */ -14,14,-68,-42,-14,41,127,30,6,-8,22,-47,89,101,-35,27, 
  /* [34][0][][] */ -88,-17,86,12,22,-46,108,-3,-127,29,36,-48,42,63,-50,-38, 
  /* [35][0][][] */ 2,24,-50,12,-84,122,-49,-20,-22,127,-2,101,-75,72,2,42, 
  /* [36][0][][] */ -8,-83,127,-50,-52,14,-43,-13,16,19,-44,78,3,-83,-37,49, 
  /* [37][0][][] */ 87,1,69,-37,127,-67,-56,40,-60,124,-79,-7,-96,-45,112,-24, 
  /* [38][0][][] */ 37,25,41,-80,12,-84,-98,56,-108,72,-69,-49,-81,-119,-127,121, 
  /* [39][0][][] */ -85,29,-73,-45,-92,-76,87,19,-127,-49,12,80,24,6,5,43, 
  /* [40][0][][] */ 127,34,14,-78,-110,14,22,-35,-49,-16,-45,-110,42,65,68,35, 
  /* [41][0][][] */ 98,-75,-69,-63,-18,3,-83,-9,58,-32,-8,-68,127,-74,48,-43, 
  /* [42][0][][] */ -12,-96,-40,127,4,-103,-108,17,0,7,11,52,-80,69,-58,6, 
  /* [43][0][][] */ -93,-43,-54,-123,-65,7,0,88,57,-127,-54,34,-5,-53,-15,92, 
  /* [44][0][][] */ -41,50,34,-59,-29,-18,39,127,124,-97,62,110,123,60,-33,-19, 
  /* [45][0][][] */ 39,91,-96,95,127,-89,-38,-62,116,-84,64,-79,-37,16,-88,61, 
  /* [46][0][][] */ -25,-44,16,-3,95,-29,23,15,-5,127,-21,-112,36,58,-45,86, 
  /* [47][0][][] */ 80,-40,-33,-14,79,-12,-37,-58,-7,127,-30,32,-9,-102,-84,8, 
  /* [48][0][][] */ 2,34,-12,-117,-3,-49,127,-120,29,2,-47,54,65,82,23,33, 
  /* [49][0][][] */ -52,107,-53,56,46,-66,74,26,-41,35,13,-92,-15,100,127,-118, 
  /* [50][0][][] */ 8,41,-20,4,-127,-1,-64,-60,65,73,32,33,-38,-46,1,38, 
  /* [51][0][][] */ 127,-39,-52,-12,-40,88,-90,-41,50,-15,-43,63,-29,-77,-1,47, 
  /* [52][0][][] */ -26,-62,53,81,-39,-123,-127,-16,-38,-53,-17,-65,22,-66,-12,105, 
  /* [53][0][][] */ 18,91,108,-112,33,127,74,-27,-32,2,-41,-15,113,-124,20,48, 
  /* [54][0][][] */ 35,127,2,-27,-9,-87,-110,57,2,-29,-47,122,79,93,23,54, 
  /* [55][0][][] */ -45,-19,60,35,56,-40,101,86,-79,-2,22,17,127,45,-8,10, 
  /* [56][0][][] */ 127,24,13,21,-55,120,-51,-79,-30,46,-77,-2,-64,116,9,16, 
  /* [57][0][][] */ -42,-34,-46,-30,-70,-96,61,-19,-127,-26,69,53,23,37,-15,77, 
  /* [58][0][][] */ 47,-62,72,29,9,-75,-16,13,21,-11,-127,-23,22,-32,-36,59, 
  /* [59][0][][] */ 75,-4,-125,103,19,45,127,-39,-88,-26,56,-69,-100,-43,31,113, 
  /* [60][0][][] */ 2,34,-14,18,-19,-23,-26,6,-40,-82,65,124,-48,-127,-34,-11, 
  /* [61][0][][] */ -40,10,90,-84,-70,43,0,114,-20,-88,48,75,93,-11,-13,127, 
  /* [62][0][][] */ 82,46,-10,-127,-20,4,9,-41,-9,36,-48,46,46,-22,-86,-90, 
  /* [63][0][][] */ -3,-24,1,-4,-66,-69,-55,15,-71,-12,-40,-23,127,0,49,-3, 
  /* [64][0][][] */ 26,-2,-10,61,-102,-52,-25,-88,57,127,31,5,35,-58,-49,111, 
  /* [65][0][][] */ -31,5,-15,-12,-82,71,25,-22,56,-115,103,-62,68,59,-127,63, 
  /* [66][0][][] */ -118,102,-103,-94,40,-28,-115,-82,-100,107,101,-6,-127,-43,36,51, 
  /* [67][0][][] */ -22,-35,-127,-119,83,98,22,-29,-16,-2,45,-15,43,27,19,46, 
  /* [68][0][][] */ 49,23,-10,-46,-67,36,8,36,-56,71,122,-10,-13,-54,-127,2, 
  /* [69][0][][] */ 76,-110,71,-41,18,-125,-33,127,3,70,83,91,-22,71,-35,9, 
  /* [70][0][][] */ 47,1,127,49,87,-30,111,10,36,28,-56,47,-66,57,-72,54, 
  /* [71][0][][] */ 10,31,83,-71,-127,-68,12,11,-24,-16,1,-99,-73,5,20,21, 
  /* [72][0][][] */ -50,-82,20,-119,73,-9,8,37,-60,9,-127,-17,50,117,-69,111, 
  /* [73][0][][] */ 22,17,58,0,127,-103,-52,5,-32,104,-88,42,-89,-61,119,-10, 
  /* [74][0][][] */ -97,7,-110,-55,66,-23,-44,23,-50,-2,-127,-29,-28,-66,-25,51, 
  /* [75][0][][] */ 96,-21,47,-48,14,8,-127,-21,-8,-103,68,0,4,-12,-13,-2, 
  /* [76][0][][] */ -2,-59,-39,121,42,96,125,-50,86,-127,100,119,62,-96,-83,63, 
  /* [77][0][][] */ -34,-30,127,-30,29,-20,-35,-126,11,10,17,85,37,56,26,-10, 
  /* [78][0][][] */ -48,10,6,-40,-4,-50,59,-1,27,-21,-13,-99,-66,-69,-127,-69, 
  /* [79][0][][] */ -86,-71,-16,28,127,30,-18,15,29,30,-15,51,-41,-79,-61,-13, 
  /* [80][0][][] */ 8,-114,45,127,-45,-21,-117,89,-21,17,79,-3,-91,-1,-16,66, 
  /* [81][0][][] */ 114,61,-10,99,4,28,39,123,24,21,125,67,127,30,58,-8, 
  /* [82][0][][] */ -48,8,10,-38,20,-124,-127,-87,0,69,-57,-38,-33,106,-66,-37, 
  /* [83][0][][] */ 95,-26,87,-9,-22,-20,-127,-9,-6,-81,7,-42,13,3,41,-30, 
  /* [84][0][][] */ 19,-61,-107,14,127,55,24,49,-107,14,-119,-33,41,-33,-91,-1, 
  /* [85][0][][] */ 8,96,49,-47,96,8,52,-101,127,-33,9,-16,113,-85,11,3, 
  /* [86][0][][] */ 118,-36,127,50,5,-57,66,36,-58,-51,-94,-42,35,14,-65,11, 
  /* [87][0][][] */ -4,8,17,-74,69,-26,-46,16,33,-33,66,-35,-76,-127,-7,24, 
  /* [88][0][][] */ -55,-31,38,-3,21,29,-61,-46,-9,10,-68,-127,-37,-36,-15,-21, 
  /* [89][0][][] */ -70,14,19,-68,31,8,-127,23,81,24,-77,-12,16,-80,-43,-23, 
  /* [90][0][][] */ -12,-18,-26,-73,127,15,-58,34,46,57,34,-9,33,13,-66,-13, 
  /* [91][0][][] */ -42,-63,12,44,-56,-2,-8,87,-53,-72,41,-58,-12,76,39,127, 
  /* [92][0][][] */ -35,80,1,-11,-20,66,-119,64,-38,-10,67,1,-37,127,51,23, 
  /* [93][0][][] */ -22,86,-57,-74,80,127,-81,30,87,87,96,77,-119,22,-37,102, 
  /* [94][0][][] */ 21,59,112,21,-127,-47,1,-20,20,-14,9,-13,-57,-35,1,-23, 
  /* [95][0][][] */ -13,25,50,9,127,-22,-80,73,32,24,-86,91,4,-8,71,-28, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant8_scale = { 96, { 0.0022244148422032595, 0.0030691444408148527, 0.0017884639091789722, 0.0016496069729328156, 0.0018545285565778613, 0.002543584443628788, 0.0017362320795655251, 0.0022817493882030249, 0.0018221907084807754, 0.0026322482153773308, 0.0014919757377356291, 0.002242725808173418, 0.0017488596495240927, 0.0013307300396263599, 0.0020279283635318279, 0.0022027443628758192, 0.0029220073483884335, 0.0021972842514514923, 0.0020620676223188639, 0.0015636095777153969, 0.0016622167313471437, 0.0023226984776556492, 0.0019676967058330774, 0.0020216815173625946, 0.0022367855999618769, 0.0019968589767813683, 0.0026640540454536676, 0.0024809311144053936, 0.0010741970036178827, 0.0022680824622511864, 0.0018702277448028326, 0.0027470812201499939, 0.0025994086172431707, 0.0019934414885938168, 0.0013146983692422509, 0.0019904894288629293, 0.0024578880984336138, 0.0017594515811651945, 0.0017590774223208427, 0.0015272625023499131, 0.0022907799575477839, 0.0020904461853206158, 0.0027822142001241446, 0.0013038133038207889, 0.0018810487817972898, 0.0016535933827981353, 0.0017867130227386951, 0.0017385587561875582, 0.0011806485708802938, 0.0018001270946115255, 0.0027401461265981197, 0.0018637909088283777, 0.0015641483478248119, 0.0026414368767291307, 0.0021002385765314102, 0.0020336506422609091, 0.0017873113974928856, 0.0019749102648347616, 0.0026988494209945202, 0.0017763999057933688, 0.002167451661080122, 0.002179799135774374, 0.0019679849501699209, 0.001886446145363152, 0.0014980830019339919, 0.0017077410593628883, 0.0018438802799209952, 0.0013270491035655141, 0.002153490437194705, 0.0022076175082474947, 0.0020197101403027773, 0.0012507798383012414, 0.0014818771742284298, 0.0020309027750045061, 0.0017544693546369672, 0.0014679314335808158, 0.0015410119667649269, 0.001360776019282639, 0.0018204826628789306, 0.0020111864432692528, 0.00098264613188803196, 0.0019059448968619108, 0.0017367962282150984, 0.0025249961763620377, 0.0016712326323613524, 0.002119431272149086, 0.0021668719127774239, 0.0016926579410210252, 0.0020976574160158634, 0.0020647780038416386, 0.0020901218522340059, 0.0017783280927687883, 0.0019680727273225784, 0.0014654512051492929, 0.0022956822067499161, 0.0024172638077288866, } };
const TfArray<96, int> quant8_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[16] = { 8033, 13702, -1370, -731, 1934, 5048, 339, 5797, 15628, -3244, -10247, 7287, -12044, 8902, 2890, 11311, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 6.2164872360881418e-05, 8.4013059677090496e-05, 6.0135378589620814e-05, 8.1805599620565772e-05, 8.2803118857555091e-05, 0.00011383901437511668, 5.6653992942301556e-05, 5.9548980061663315e-05, 8.6218089563772082e-05, 7.888302206993103e-05, 5.9480516938492656e-05, 5.8620418712962419e-05, 7.305904000531882e-05, 6.7426415625959635e-05, 9.7102238214574754e-05, 0.00011600800644373521, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[16*1*1*96] = { 
  /* [0][0][][] */ -118,30,61,-18,-52,-13,-57,-3,-48,2,-19,-32,30,53,35,-20,14,-9,104,8,13,-62,127,84,40,24,3,35,-78,-106,-81,1,-52,-34,33,10,8,23,6,21,-5,-8,-79,16,-64,-14,19,82,-11,2,-41,-13,-4,4,29,-60,-87,-4,-15,89,62,31,2,12,-43,-37,-46,14,-45,-66,20,11,8,-1,-80,-53,-36,21,-59,11,-61,63,77,-64,16,44,6,42,44,-16,-3,-33,-29,-33,-67,12, 
  /* [1][0][][] */ 33,31,14,-48,-36,-9,-3,41,-9,14,58,-64,-10,4,-77,-30,-9,-4,-56,25,-18,-97,18,57,-19,-69,0,-37,62,-99,108,-81,52,23,-44,60,47,72,-7,-51,20,9,-10,7,18,82,-127,-74,-38,-60,-9,-15,33,-55,-42,34,44,-14,-43,13,40,60,-10,-88,-7,-7,-62,-30,10,-21,-80,23,-60,-10,21,-67,0,34,9,-75,-28,-43,-85,-39,27,-29,-21,10,-81,-2,-40,59,20,46,-58,65, 
  /* [2][0][][] */ 84,-43,29,19,-4,-96,58,-28,-12,-1,-17,-8,-71,-54,22,-45,-108,-50,-57,55,15,-27,-43,17,24,-80,-5,-49,-27,33,-58,126,-55,127,-26,9,-27,-13,-28,-2,-97,96,87,3,-86,-11,-10,15,22,14,-41,-66,57,-7,-19,84,-6,1,65,-17,-5,41,-39,1,67,14,0,21,34,64,-52,-41,65,31,70,37,29,-96,109,82,88,-15,-21,32,-62,31,22,87,31,3,-46,6,-54,65,-7,28, 
  /* [3][0][][] */ -1,-4,-4,14,-4,-18,10,-71,-20,67,28,64,45,-40,-41,35,19,-26,29,12,18,127,30,-43,25,16,-20,1,64,-37,62,-12,-19,22,-11,-26,4,53,25,17,-52,-19,-33,0,-38,13,28,37,-33,-41,-5,-28,53,-63,-20,-31,-11,88,-15,3,-28,-14,-24,5,18,35,-35,8,-19,5,9,-79,-12,-39,26,-17,11,-14,-18,-16,-19,12,-37,18,-4,-31,21,-10,17,24,18,-34,42,26,-27,50, 
  /* [4][0][][] */ 30,9,-32,12,3,16,-58,-14,-33,82,100,-13,-8,-4,11,-58,9,-10,-50,50,21,-34,48,74,-65,1,-127,12,-41,-72,9,17,-53,-51,14,46,10,31,16,35,-29,-39,52,-32,-11,1,-43,57,-48,59,6,18,37,-16,-85,21,27,-19,17,-17,38,-9,24,-4,-50,9,-34,39,-50,29,-44,27,43,-69,-38,-41,23,-65,18,5,-47,90,-78,-7,-36,14,22,-53,49,-9,20,-11,-56,-25,37,24, 
  /* [5][0][][] */ -79,40,40,-3,72,-13,54,-12,-36,24,-4,-35,21,-4,-28,-26,-3,-33,53,23,-127,-56,-78,42,-63,3,49,44,31,-57,-16,56,50,113,-13,28,-4,22,47,-32,-36,87,41,-22,10,82,37,-10,21,7,-14,33,3,-40,29,-99,71,-62,-73,-49,76,84,-48,9,85,-34,-70,-83,-47,-22,-54,40,-25,28,-26,-47,33,-22,-61,-33,107,-4,-2,-77,-86,30,31,-14,-56,52,44,6,-1,20,-4,91, 
  /* [6][0][][] */ 43,-5,-82,29,-32,-113,79,103,-66,64,-7,84,-127,-86,53,54,-7,-53,-13,9,-2,-4,-72,-67,-60,52,80,17,48,26,100,-60,34,15,12,-65,15,8,27,83,-2,19,-64,-32,-4,-69,-82,22,34,-120,-35,73,31,4,-25,-69,109,44,18,-13,-119,49,-102,6,25,6,5,74,48,34,1,-69,-47,26,89,45,61,-11,41,-93,-12,-48,-79,61,-2,-65,59,20,-55,58,33,57,-17,-1,-32,120, 
  /* [7][0][][] */ 30,72,-37,-55,-53,-23,38,-18,-61,35,-53,-49,-35,2,26,-18,-46,-39,-44,58,1,127,8,25,-15,3,12,27,53,29,80,-35,63,25,-18,-4,1,-13,-3,39,-58,-1,25,-61,15,-56,79,-19,32,-74,-80,-29,-40,12,13,-8,8,14,-91,5,-13,103,15,-36,-29,-4,-36,27,-41,-14,-93,-13,17,49,-31,38,-47,51,17,-74,-14,-48,57,-69,45,-31,-21,10,-9,69,-87,24,54,-27,-37,6, 
  /* [8][0][][] */ -6,90,-49,44,-34,-23,-87,34,-94,-36,13,-3,-39,48,31,90,3,-52,9,4,28,-9,7,-8,-23,74,-3,34,-26,-1,-48,-32,-24,-53,-39,-69,-44,28,53,0,-4,-42,23,14,-32,-28,0,-13,-17,-17,55,74,-2,-25,-80,96,-28,27,-8,-30,-33,11,21,56,-28,-60,-44,-4,-48,2,-1,26,-21,-47,-116,-20,-52,22,-72,-42,-33,1,-40,-39,4,3,15,24,24,69,-55,-3,-92,-127,18,-49, 
  /* [9][0][][] */ -17,14,-66,50,-34,-42,63,23,-12,55,-22,101,-18,-39,27,127,17,13,65,21,23,38,33,-106,-27,-3,23,-17,24,-21,42,47,-26,-2,5,-119,21,-15,-30,-12,-9,24,46,-35,-19,-8,15,19,28,92,21,-13,-49,-71,2,9,-22,-9,77,-24,-75,51,-52,-38,81,-16,-22,26,-65,31,39,18,-3,79,-23,-23,-30,14,-31,-5,48,-27,64,-8,25,-20,-12,-29,-49,15,0,-16,62,33,-41,-7, 
  /* [10][0][][] */ 65,-4,-39,7,-31,-36,68,-6,4,-17,-18,0,-78,-17,5,-9,-57,-26,14,23,41,34,16,-6,-40,62,40,-12,-53,-73,-25,-9,73,-41,51,7,61,-81,85,127,20,-51,13,-6,-8,-91,-15,57,24,78,-68,-48,2,28,20,53,-15,-52,76,51,-18,48,-55,-29,-9,-66,24,62,19,-21,-7,24,113,24,25,-75,32,-49,65,-15,-40,37,32,24,-33,-14,1,44,-26,-17,18,47,50,60,-24,3, 
  /* [11][0][][] */ -60,-42,49,-58,6,-23,-28,-87,48,-45,-8,-3,-3,-9,26,3,-52,-3,55,6,-55,52,-71,-95,22,5,-58,39,44,-62,38,-33,16,-7,28,-24,-97,10,-115,17,-66,65,-44,48,7,-1,11,-21,-10,-29,-55,-49,31,46,80,-52,-71,-65,19,-42,-35,-55,-16,-127,17,-57,55,83,125,18,61,-48,-2,-18,68,-55,89,19,39,90,21,-5,-9,91,89,28,-19,-12,-54,-68,-14,14,51,34,60,62, 
  /* [12][0][][] */ 33,-26,0,-40,38,100,-6,33,41,60,-1,58,11,46,8,-7,-64,47,7,52,127,3,64,-71,22,26,-65,-74,-8,69,3,8,36,0,13,-40,43,-2,-36,-30,21,-16,35,42,-33,31,-2,-15,-69,27,-5,16,-33,-27,5,20,-41,48,16,43,21,-86,6,-101,-2,91,-8,-13,-2,-37,61,10,-11,16,-11,54,-16,45,-63,1,-22,11,109,23,-17,69,-22,-64,80,-1,-79,27,73,3,-16,-93, 
  /* [13][0][][] */ -16,31,-5,-28,-30,-14,12,-41,13,-28,-30,-57,71,-102,-40,-65,5,-35,-78,-13,-83,-10,23,88,-7,7,101,4,27,-39,55,16,10,-15,-110,127,-33,-41,30,-44,105,12,1,21,-7,-89,61,-29,61,-5,-37,22,25,-3,-2,69,78,-48,-33,-11,42,38,2,-75,-13,43,-29,27,-52,-29,-67,-3,-55,4,-51,-78,-94,20,20,94,-21,63,44,-94,54,36,33,-5,-21,-9,2,10,-56,18,-15,-13, 
  /* [14][0][][] */ -16,19,-82,-15,107,94,-88,-4,34,-53,69,-5,8,-19,-38,-52,-65,12,51,127,4,-35,-12,13,-19,39,-28,68,12,-13,-28,7,60,-6,-33,9,-8,59,77,-2,62,-8,31,18,0,-35,57,-45,33,-15,-14,-25,48,9,-31,24,40,64,-97,-18,-9,-60,-39,-97,6,-40,-45,-21,-69,51,-9,38,2,-22,-34,-37,42,-6,-79,-33,27,3,-8,-20,-6,44,-2,-18,-37,72,74,29,2,-47,-44,-55, 
  /* [15][0][][] */ -65,-46,43,-59,-14,-38,-37,-90,4,21,0,70,0,-35,29,70,-93,-18,0,-59,33,-3,1,-82,67,-14,47,-62,-37,-108,-62,28,-29,39,71,-85,-11,-37,13,-14,-14,3,45,-29,-12,-15,57,99,-55,-1,12,-47,-44,46,8,-42,-127,-14,108,-2,-38,6,-88,2,-67,-16,8,53,42,-64,78,-65,59,-42,-23,-38,-2,12,73,18,-16,63,76,24,-6,-10,-115,13,-19,-71,-83,23,37,-22,-14,52, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant10_scale = { 16, { 0.0026420070789754391, 0.0035705550108104944, 0.0025557535700500011, 0.0034767379984259605, 0.0035191325005143881, 0.0048381579108536243, 0.0024077945854514837, 0.0025308316107839346, 0.003664268646389246, 0.0033525284379720688, 0.0025279219262301922, 0.0024913677480071783, 0.0031050092075020075, 0.0028656227514147758, 0.0041268449276685715, 0.0049303402192890644, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data11[96] = { 2466, -1307, -1946, -5140, -340, 1366, 789, -1376, -1644, -4826, 6707, -2024, 1620, 13092, 7378, -2849, 17043, 3117, -4403, 2356, 3562, -3728, -6134, -3820, -45, -3101, -1919, -5670, 152, -8195, 1936, 206, 12722, 839, 606, 94, 830, -1408, -1985, 7598, 17, 937, 1566, -3737, 16026, 22650, -787, 20225, -4198, 14834, 5990, -3183, -553, 1677, -1089, 15567, -3239, -1234, 14698, 7146, 5866, 5705, 8399, -6079, 5710, -366, -3002, 5783, -3454, -2439, -2219, 374, 18252, -492, -2646, 13061, -982, 2830, 9137, -136, -1250, 16084, -3161, 4222, 15340, 6986, -5705, -2255, 954, -9068, 14858, -135, 863, 715, -5239, -2387, };
const TfArray<1, int> tensor_dimension11 = { 1, { 96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.00032690964872017503, 0.00022792337404098362, 0.00012198581680422649, 0.0001543038961244747, 0.00024739588843658566, 0.00029006690601818264, 0.00027043261798098683, 0.00026653509121388197, 0.00022547444677911699, 0.00016615290951449424, 0.00015471610822714865, 0.00025616033235564828, 0.00027199610485695302, 0.0001090813530026935, 0.00014072522753849626, 0.00019439244351815432, 0.00010059124178951606, 0.00021528538491111249, 0.00013860099716112018, 0.00012826143938582391, 0.00019465919467620552, 0.00029121193801984191, 0.00021692740847356617, 0.00016021510236896574, 0.0004013773868791759, 0.0002386663545621559, 0.00029181776335462928, 0.00010052286233985797, 0.00017750247207004577, 9.6789117378648371e-05, 0.00035911882878281176, 0.00018762107356451452, 0.00013734339154325426, 0.00020508650050032884, 0.0003605638921726495, 0.00033859346876852214, 0.00021329778246581554, 0.00027188018430024385, 0.00025994278257712722, 0.0001624345313757658, 0.00020394708553794771, 0.00023236597189679742, 0.00026344766956754029, 0.0001174142089439556, 7.190996257122606e-05, 6.1862177972216159e-05, 0.00023939835955388844, 9.7190022643189877e-05, 0.00025169111904688179, 8.7140680989250541e-05, 0.00014725897926837206, 0.00015879512648098171, 0.00022483017528429627, 0.00021098471188452095, 0.00028522350476123393, 9.8973745480179787e-05, 0.00015832314966246486, 0.00019438590970821679, 0.00016889450489543378, 0.00012504860933404416, 0.00020990926714148372, 0.00025409346562810242, 0.00013666925951838493, 0.00012295025226194412, 0.00016225808940362185, 0.00030772024183534086, 0.00026974358479492366, 0.00020133009820710868, 0.0002692875568754971, 9.5811381470412016e-05, 0.00026335509028285742, 0.00015088875079527497, 0.00011288026144029573, 0.00021996916620992124, 0.0003256915370002389, 0.00010176470095757395, 0.00013669246982317418, 0.00021809712052345276, 0.00019168120343238115, 0.00027512508677318692, 0.0002929511247202754, 9.4364215328823775e-05, 0.00029859109781682491, 0.00016579058137722313, 8.6151747382245958e-05, 0.00019383168546482921, 0.00011527941387612373, 0.00024861996644176543, 0.00028215994825586677, 0.00013679701078217477, 8.7042855739127845e-05, 0.00033594112028367817, 0.00026731533580459654, 0.0002795225300360471, 0.00012569691170938313, 0.00032337760785594583, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[1*3*3*96] = { 
  /* [0][0][][] */ 18,106,-8,1,-42,9,37,37,66,-56,-81,45,-29,-14,-7,-30,-98,12,20,36,17,50,93,94,33,-19,-35,50,-18,20,23,-29,-52,6,-48,71,-4,58,21,-10,22,-36,-1,21,-110,-117,3,-60,-10,-127,-15,12,2,53,-16,-56,-61,-52,-71,-127,-106,27,-76,1,-46,43,55,-40,-11,83,48,-49,-70,10,35,-5,20,-50,-66,17,10,-52,61,-24,-59,-88,4,0,-114,35,-116,41,82,-19,72,-18, -49,-25,-7,88,-23,101,-30,23,85,31,-127,81,-36,-72,-127,100,-105,53,64,88,104,-1,119,127,30,6,22,64,8,127,-19,-127,65,70,-7,56,61,69,-21,-127,127,-4,86,127,-79,-127,127,-108,0,-119,-113,-5,3,127,-14,-127,9,43,-127,-71,-1,-127,-15,95,-63,89,123,-33,13,127,127,45,-127,34,-27,-127,76,-72,-21,127,-6,-87,127,-102,-47,-48,88,43,99,127,-66,7,127,-40,127,32, 12,-76,-6,2,-34,-5,-16,37,34,82,-59,33,-28,24,-1,-92,-44,7,0,16,22,70,85,77,19,-40,37,57,9,23,-15,-64,-47,-74,-50,74,-2,17,37,23,-13,40,-14,60,-66,-80,10,-59,33,-77,84,-21,-16,-25,16,-8,92,-82,-35,-65,-127,13,-98,-9,20,19,-29,3,-24,27,19,-42,-64,-40,-12,3,36,-24,-29,3,8,-83,36,-55,-65,-70,1,-26,-87,22,-42,46,28,25,37,-34, 
  /* [0][1][][] */ 74,-3,51,127,16,-52,127,53,-25,-117,-104,127,-14,-118,-50,22,-85,-48,83,-15,-127,10,-127,-11,12,42,-120,127,-88,84,127,76,12,44,17,122,-127,49,-7,-73,63,-127,17,44,-127,-103,9,-127,-86,-87,-49,15,127,-73,84,-38,-111,15,-71,-11,-60,-23,-37,31,-127,-20,91,-108,-44,73,-28,-121,-117,70,127,-79,127,63,-79,-45,127,-101,-17,127,-55,-27,5,90,11,39,-104,28,-22,-95,73,3, -127,12,-45,121,-93,-127,-125,-127,87,10,-27,51,-96,-127,45,127,-127,-127,127,127,23,-127,-124,75,-127,127,11,68,-65,-22,-115,77,-127,77,127,-99,21,127,127,-92,-33,23,15,71,-54,-72,-80,-107,8,-109,-127,127,30,66,78,-90,5,33,86,-16,38,-30,-127,127,-20,-127,127,127,33,84,-77,-35,4,63,-85,-126,116,127,127,-57,-76,-17,-88,87,-127,-127,127,127,127,103,-127,-127,-111,-63,85,127, 40,27,66,86,12,-20,2,46,-42,127,-38,89,-2,-47,-77,24,18,-38,30,-15,-115,35,-34,-16,16,23,127,7,127,95,5,-110,-37,-127,-15,124,-116,4,-12,-36,-4,70,16,85,-44,-105,19,-82,127,-80,-31,8,51,-103,-127,-12,127,-6,-100,68,-16,-27,-30,41,120,-36,-6,6,-59,36,-25,-85,-92,-127,-1,-61,16,-36,-106,-29,-51,-105,-9,120,-92,-5,-2,-26,-32,23,-2,48,-31,127,23,-26, 
  /* [0][2][][] */ 17,-127,27,-15,18,16,28,26,-26,-41,13,-75,12,-22,-15,4,-47,13,-9,-2,-36,56,32,3,30,32,-6,-20,-56,-1,-9,18,-45,-11,-28,127,36,-7,18,-16,-6,9,-17,-113,-14,-37,-19,-28,2,25,16,17,10,-4,-29,5,-41,9,-17,8,-21,46,35,-16,-58,50,-59,-80,5,17,12,106,-60,9,35,-31,-58,-48,-32,-12,11,6,-5,-33,-46,22,-12,-11,-69,72,-4,21,-17,-5,7,-16, -54,21,127,-31,127,69,-36,5,-127,26,-22,-57,127,-13,-54,9,14,41,4,-101,4,27,77,16,72,-49,-7,28,-17,92,-23,22,-100,14,13,-23,56,29,25,-89,-23,-14,-127,10,-27,22,-48,-73,12,-97,-61,64,110,-77,-23,-92,-38,127,-23,4,49,-64,75,41,-48,22,-16,-16,127,-17,47,127,-101,21,-4,-73,-44,-96,-63,-45,-11,-127,-17,-84,-20,114,70,-13,89,68,40,29,-39,-3,-8,-11, 2,74,40,-3,9,-4,-22,35,12,81,64,-40,1,-9,-26,-5,-33,4,-26,5,-35,57,37,27,34,53,19,27,1,-1,-34,-72,-14,-15,-25,-51,23,-44,19,-14,-19,-18,-1,-66,28,-63,-11,-9,43,20,27,-9,-11,-25,15,-24,46,19,37,47,-54,17,5,-25,21,19,-67,3,21,-1,-5,118,-34,-13,2,10,-68,-20,-55,8,-4,-55,-2,-33,-31,13,-1,-49,-89,103,22,21,-15,13,-2,-29, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.01389366015791893, 0.0096867429092526436, 0.0051843971014022827, 0.0065579153597354889, 0.010514325462281704, 0.012327843345701694, 0.011493385769426823, 0.011327741667628288, 0.0095826638862490654, 0.0070614982396364212, 0.0065754344686865807, 0.010886813513934612, 0.011559833772480488, 0.0046359575353562832, 0.0059808222576975822, 0.0082616787403821945, 0.0042751277796924114, 0.0091496286913752556, 0.0058905421756207943, 0.0054511111229658127, 0.0082730157300829887, 0.012376506812870502, 0.0092194145545363426, 0.0068091414868831635, 0.017058538272976875, 0.010143320076167583, 0.012402255088090897, 0.0042722215875983238, 0.0075438548810780048, 0.0041135372593998909, 0.015262549743056297, 0.0079738954082131386, 0.0058370940387248993, 0.008716176263988018, 0.01532396487891674, 0.014390221796929836, 0.0090651558712124825, 0.011554907076060772, 0.011047568172216415, 0.0069034676998853683, 0.0086677512153983116, 0.009875553660094738, 0.011196525767445564, 0.004990103654563427, 0.0030561734456568956, 0.0026291424874216318, 0.010174429975450039, 0.0041305758059024811, 0.010696872137486935, 0.0037034787237644196, 0.0062585067935287952, 0.0067487927153706551, 0.0095552820712327957, 0.0089668501168489456, 0.012121998704969883, 0.0042063840664923191, 0.0067287338897585869, 0.0082614012062549591, 0.007178016472607851, 0.0053145657293498516, 0.0089211435988545418, 0.010798972100019455, 0.005808443296700716, 0.0052253855392336845, 0.0068959686905145645, 0.013078110292553902, 0.011464102193713188, 0.0085565289482474327, 0.01144472137093544, 0.0040719835087656975, 0.011192590929567814, 0.0064127719961106777, 0.0047974111512303352, 0.009348689578473568, 0.013841889798641205, 0.004324999637901783, 0.0058094295673072338, 0.0092691276222467422, 0.0081464508548378944, 0.011692816391587257, 0.012450423091650009, 0.0040104789659380913, 0.012690121307969093, 0.0070460992865264416, 0.0036614493001252413, 0.0082378461956977844, 0.0048993751406669617, 0.01056634820997715, 0.01199179794639349, 0.0058138729073107243, 0.0036993212997913361, 0.014277497306466103, 0.011360901407897472, 0.011879707686603069, 0.0053421189077198505, 0.013743547722697258, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[96] = { 8439, 3557, 795, -663, 3613, 6052, 4546, 1416, -388, 6935, 621, -2994, 2754, 3035, 431, 171, 2790, 6311, -303, -19, 2803, 5153, 8217, -1120, -2197, -682, 10578, 316, 1135, 1313, 6363, -1397, 9101, 2337, 4195, -3587, 738, -4428, 480, 2421, 1624, 858, 1659, -191, 439, 1511, 3146, 2850, 2675, 2432, 4890, 2313, -2114, 1755, 796, 1076, 1101, 1154, 5935, 1274, -796, 4260, 2826, 3314, 3506, 6382, -3389, 3006, 7114, -811, 4976, 220, 3631, 1991, 2640, 1724, -180, 2253, 2028, 2195, 2111, 1849, 5926, 572, 2766, 5317, 517, -816, 12736, -179, 322, -1119, 9688, 2556, 47, -629, };
const TfArray<1, int> tensor_dimension13 = { 1, { 96 } };
const TfArray<96, float> quant13_scale = { 96, { 9.8243617685511708e-05, 0.00014002305397298187, 0.00020180344290565699, 0.00025253568310290575, 0.00018215992895420641, 0.00011610419460339472, 0.00018796854419633746, 0.0001822424674173817, 0.00017777305038180202, 0.0001040109054883942, 0.00027879132539965212, 0.00015653127047698945, 0.00020312273409217596, 0.00016950898861978203, 0.00023593564401380718, 0.00021549980738200247, 0.00021760202071163803, 0.00012144561333116144, 0.00022249142057262361, 0.00017495633801445365, 0.00022342137526720762, 0.00016203550330828875, 0.00010677714453777298, 0.00022135736071504653, 0.00020660649170167744, 0.00021778933296445757, 8.239535236498341e-05, 0.00014460747479461133, 0.00024446533643640578, 0.0001924939570017159, 0.00013421733456198126, 0.00020135691738687456, 8.5969702922739089e-05, 0.00021166133228689432, 0.00015981265460141003, 0.0001855246810009703, 0.00023137006792239845, 0.00014295631262939423, 0.00020759418839588761, 0.00014566116442438215, 0.00024198797473218292, 0.00030176446307450533, 0.0002337587793590501, 0.00035154932993464172, 0.00031926934025250375, 0.00026197076658718288, 0.00018578494200482965, 0.00021293309691827744, 0.00020392105216160417, 0.00021426122111734003, 0.00015498734137509018, 0.00020813262381125242, 0.00016086098912637681, 0.00019687697931658477, 0.00026697356952354312, 0.00028461651527322829, 0.00021534155530389398, 0.00026465818518772721, 0.0001368077500956133, 0.00017674903210718185, 0.00031753076473250985, 0.00016039499314501882, 0.00017888586444314569, 0.00017508688324596733, 0.00017584857414476573, 0.00011481429828563705, 0.0001655642845435068, 0.00020256394054740667, 0.00010864979412872344, 0.00024197487800847739, 0.00013927946565672755, 0.00022355337569024414, 0.00013904478691983968, 0.00020449436851777136, 0.00020028665312565863, 0.00016215007053688169, 0.00019362845341674984, 0.00016418934683315456, 0.000196131004486233, 0.00018912996165454388, 0.00019924450316466391, 0.00020273207337595522, 0.00012924715701956302, 0.00021395231306087226, 0.00019887080998159945, 0.00014629808720201254, 0.00019031799456570297, 0.00023269235680345446, 7.2999864642042667e-05, 0.00021918100537732244, 0.00031734010553918779, 0.00019383225298952311, 9.3104375991970301e-05, 0.00016480938938912004, 0.00026155056548304856, 0.00016832773690111935, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data14[96*1*1*16] = { 
  /* [0][0][][] */ -108,54,0,-65,-56,-106,-43,5,60,-43,73,-99,121,-85,-37,-127, 
  /* [1][0][][] */ -123,3,-109,-121,-47,40,6,41,-68,62,82,-90,127,117,-60,66, 
  /* [2][0][][] */ -48,-5,-84,1,-17,-42,35,-32,-81,127,68,2,58,54,-58,118, 
  /* [3][0][][] */ -34,-60,3,-39,-82,14,-56,-127,-4,10,47,-71,-78,-42,-115,-28, 
  /* [4][0][][] */ 97,0,-56,39,-59,40,-127,35,0,56,25,47,11,36,-49,-101, 
  /* [5][0][][] */ -112,39,-46,-32,53,-36,-17,-74,94,-31,15,-56,-1,-97,-127,-107, 
  /* [6][0][][] */ -3,-34,-23,26,-67,66,35,-42,-24,-35,117,-20,9,4,-127,0, 
  /* [7][0][][] */ -19,85,115,-59,63,117,-21,-60,17,64,-127,-11,50,15,23,10, 
  /* [8][0][][] */ -58,-37,84,-15,99,-5,91,127,-87,-30,-65,-70,32,78,-75,-58, 
  /* [9][0][][] */ 45,46,97,24,-114,-49,-110,-100,87,12,127,39,-72,-116,42,13, 
  /* [10][0][][] */ -21,-115,0,-81,-127,65,35,60,-19,-54,0,34,-13,51,-107,24, 
  /* [11][0][][] */ 95,-56,2,81,-94,-46,48,14,127,110,-39,52,14,-74,-35,106, 
  /* [12][0][][] */ -74,-47,127,5,42,-9,39,79,80,-13,65,70,-28,9,-103,37, 
  /* [13][0][][] */ -10,-35,23,25,16,6,123,35,-92,10,23,14,-57,127,90,-76, 
  /* [14][0][][] */ 49,-90,113,0,65,51,127,50,92,53,44,50,40,-49,56,-72, 
  /* [15][0][][] */ -1,127,13,-61,23,109,-88,85,-28,-31,-43,-31,-51,93,-25,-49, 
  /* [16][0][][] */ -28,63,120,-47,14,76,-7,-13,-19,18,-17,51,91,13,86,127, 
  /* [17][0][][] */ 1,103,90,-127,21,-49,-9,-106,-44,77,-34,65,-76,-44,100,-62, 
  /* [18][0][][] */ -81,-12,-60,-72,93,52,-37,-41,22,98,127,72,-2,118,-35,19, 
  /* [19][0][][] */ 45,127,83,62,42,-43,0,-6,-22,119,64,107,59,59,-60,44, 
  /* [20][0][][] */ 97,-33,3,81,-71,-10,-35,37,-40,-35,-127,-30,92,-35,22,15, 
  /* [21][0][][] */ -64,-71,4,72,-20,-57,-127,33,17,9,45,35,-21,42,-68,10, 
  /* [22][0][][] */ 27,-15,-70,-71,122,-63,-71,95,49,127,35,69,40,28,20,45, 
  /* [23][0][][] */ -75,9,-15,28,14,53,96,82,-32,127,-10,-34,-4,55,-49,-20, 
  /* [24][0][][] */ 34,-127,91,-23,106,-53,33,-23,43,15,72,46,-33,-1,-18,19, 
  /* [25][0][][] */ 127,-56,89,9,-15,-25,-35,89,121,-7,-70,11,110,-73,75,59, 
  /* [26][0][][] */ 43,42,122,89,48,-4,-42,-27,-15,63,-11,127,33,-72,62,-62, 
  /* [27][0][][] */ -41,39,-112,12,-65,110,53,-96,42,-55,126,41,46,-60,113,127, 
  /* [28][0][][] */ -51,55,-80,-127,74,-14,0,-29,-79,83,-18,25,-46,47,-71,36, 
  /* [29][0][][] */ 87,98,-75,39,38,87,-66,-17,59,51,4,70,-127,15,-38,79, 
  /* [30][0][][] */ -7,74,-124,-30,72,-29,-1,15,-42,77,-73,-10,25,67,-22,127, 
  /* [31][0][][] */ 27,-102,93,29,68,-68,-81,27,-22,-12,47,-37,-110,64,45,127, 
  /* [32][0][][] */ -59,84,22,66,-127,46,-4,86,44,-98,44,-86,28,34,55,97, 
  /* [33][0][][] */ -67,-21,70,122,-17,9,-58,-10,-38,-43,-6,1,11,-12,21,127, 
  /* [34][0][][] */ -32,4,-78,-75,64,-26,-18,57,36,2,13,-6,-60,-41,-38,127, 
  /* [35][0][][] */ 87,-35,37,7,2,1,-107,-14,-15,-127,-49,32,16,-35,59,-16, 
  /* [36][0][][] */ -18,7,-127,7,30,102,3,32,-41,40,77,34,20,37,-72,58, 
  /* [37][0][][] */ 73,42,60,-52,45,-127,31,1,-120,67,-86,-39,21,45,98,34, 
  /* [38][0][][] */ -33,127,36,-34,45,10,67,-78,27,15,-94,54,-44,-91,-108,46, 
  /* [39][0][][] */ 88,47,-109,-121,-22,12,-10,-68,4,-18,-29,-62,89,37,-127,-100, 
  /* [40][0][][] */ -35,32,-96,-84,-35,-7,19,-127,-1,-11,12,-39,38,69,27,65, 
  /* [41][0][][] */ -23,-79,-9,127,-18,-4,-58,-6,-14,-42,56,-66,-57,-6,10,14, 
  /* [42][0][][] */ -13,68,-27,-127,2,19,37,-29,67,10,-81,32,81,-45,-31,33, 
  /* [43][0][][] */ -5,24,21,20,127,7,30,11,-4,44,13,-69,-101,-17,-8,-17, 
  /* [44][0][][] */ 127,-23,37,49,-53,-21,-19,50,-13,-44,54,22,120,47,-31,-32, 
  /* [45][0][][] */ 49,-88,-58,56,-37,-80,-1,41,7,-12,2,35,-67,127,31,-23, 
  /* [46][0][][] */ -4,-89,45,43,-13,-20,-93,58,13,-45,35,-26,52,101,53,127, 
  /* [47][0][][] */ -65,-58,13,80,-3,-1,84,34,12,-89,-127,-48,49,-56,-45,34, 
  /* [48][0][][] */ -72,94,-19,-39,-17,45,-9,-116,36,-31,73,-54,41,-127,-15,7, 
  /* [49][0][][] */ -55,9,40,-32,7,17,110,127,-41,-41,-3,15,-43,54,-48,29, 
  /* [50][0][][] */ 56,19,-69,25,34,-127,-45,-14,-74,33,-36,-1,6,-71,-118,-45, 
  /* [51][0][][] */ -60,62,-31,116,-42,55,-55,-127,-77,-89,-9,-72,12,54,-33,127, 
  /* [52][0][][] */ -127,16,-4,-27,14,45,74,14,23,-107,-29,-53,-100,-58,-115,-5, 
  /* [53][0][][] */ -23,-60,-57,-127,-19,3,-5,68,38,-63,-41,28,-48,18,66,70, 
  /* [54][0][][] */ 4,-59,-3,-13,-64,60,64,-25,-17,-104,50,13,-15,-27,-127,35, 
  /* [55][0][][] */ -11,-33,-39,34,55,-25,73,66,-48,-41,-127,-22,78,-29,-21,25, 
  /* [56][0][][] */ 75,-91,-3,13,-97,-5,-106,-59,-78,-30,-73,34,127,-72,86,36, 
  /* [57][0][][] */ -52,3,24,-28,127,15,26,15,-17,25,25,4,-65,34,-78,-24, 
  /* [58][0][][] */ 14,13,-7,-33,28,-3,-39,-51,47,-127,-51,-4,-67,-60,-12,38, 
  /* [59][0][][] */ -73,-32,2,17,16,55,-126,-29,70,127,-84,8,-28,4,-21,-18, 
  /* [60][0][][] */ 58,-39,-1,8,-127,-31,-7,7,3,44,-23,38,3,-23,15,35, 
  /* [61][0][][] */ 29,18,-80,1,-43,-24,-127,-85,-21,38,25,115,89,-64,105,84, 
  /* [62][0][][] */ 50,-23,25,-20,-14,44,55,127,-48,92,20,74,21,59,89,71, 
  /* [63][0][][] */ 23,-121,-17,-15,-79,17,49,-12,-13,-20,11,-13,-38,127,122,44, 
  /* [64][0][][] */ -10,-8,-114,-29,43,68,62,-26,-14,-82,42,16,71,-45,-76,127, 
  /* [65][0][][] */ -11,-9,72,39,81,-26,76,79,-56,-4,-117,-71,57,127,-61,-45, 
  /* [66][0][][] */ -30,-127,-13,-116,-69,-114,45,-31,-20,-51,-2,81,-80,-45,-46,84, 
  /* [67][0][][] */ 13,-37,-62,-6,-73,127,-25,-93,-68,-15,-43,-78,11,6,-48,3, 
  /* [68][0][][] */ 127,57,29,23,-85,26,-73,-57,-75,-98,-45,5,36,-30,98,-85, 
  /* [69][0][][] */ 35,-8,56,-22,-4,-71,-56,42,-13,127,-15,12,1,26,73,-13, 
  /* [70][0][][] */ 28,-23,-31,51,-106,-20,2,-102,105,127,21,68,65,-65,-42,9, 
  /* [71][0][][] */ 30,-112,94,92,-64,-73,67,13,127,8,-80,48,36,-63,-2,31, 
  /* [72][0][][] */ -16,-54,45,127,72,25,-87,78,109,2,37,33,-16,-70,-56,72, 
  /* [73][0][][] */ 59,-3,68,-127,37,-112,-65,36,-45,93,-48,15,27,-82,64,-25, 
  /* [74][0][][] */ 68,26,59,43,-127,-25,39,3,-82,-45,23,-53,14,-43,21,22, 
  /* [75][0][][] */ 87,127,-102,4,57,60,-20,-48,-9,-35,61,77,-106,48,61,42, 
  /* [76][0][][] */ -64,-42,-2,-45,-59,-10,95,-3,-70,31,111,74,-52,-127,-34,108, 
  /* [77][0][][] */ -53,127,-22,20,-83,-58,27,75,44,-56,-23,46,-8,51,-2,62, 
  /* [78][0][][] */ 103,41,-85,8,-76,54,-113,-18,21,-41,-74,-13,39,-127,13,30, 
  /* [79][0][][] */ -12,-77,114,24,-50,-118,-62,-23,-52,-6,14,19,-9,127,-68,63, 
  /* [80][0][][] */ 94,112,36,-127,-36,0,105,-14,32,7,-8,49,70,-79,30,32, 
  /* [81][0][][] */ 12,-45,5,-127,84,54,7,125,66,15,-3,-60,-53,41,-72,-91, 
  /* [82][0][][] */ 94,30,66,-35,127,-117,18,42,-5,110,-34,37,2,-40,37,-103, 
  /* [83][0][][] */ -49,57,44,47,120,41,127,71,21,52,-70,-54,-126,96,-79,-84, 
  /* [84][0][][] */ -17,-48,-17,127,-25,-121,-51,65,-30,69,3,48,-96,53,-39,-38, 
  /* [85][0][][] */ -89,69,-34,-52,-42,-83,-64,-50,-47,69,-22,-77,-127,-91,-74,55, 
  /* [86][0][][] */ -9,65,104,116,29,-42,60,29,-9,23,-27,-80,41,101,-127,-73, 
  /* [87][0][][] */ -15,51,127,-32,-104,-26,24,6,32,-30,12,40,-63,14,-5,-20, 
  /* [88][0][][] */ -10,-80,-127,52,87,50,-1,-23,-28,-80,-126,-79,113,-26,6,40, 
  /* [89][0][][] */ 22,28,22,-103,-3,-79,-45,34,127,-6,33,-96,11,-35,54,-66, 
  /* [90][0][][] */ 11,62,28,23,-33,34,29,124,18,-48,-18,127,61,23,-49,81, 
  /* [91][0][][] */ -53,2,-14,63,89,59,-45,-114,-40,32,-15,21,-111,-127,-69,-35, 
  /* [92][0][][] */ -30,68,-2,-30,-127,-3,-69,47,-37,63,93,75,-8,-6,59,13, 
  /* [93][0][][] */ 121,52,118,56,-127,-96,3,54,7,-66,-2,-62,9,-77,-30,0, 
  /* [94][0][][] */ -18,-127,23,-112,17,41,-18,5,79,-26,0,53,16,56,-58,40, 
  /* [95][0][][] */ -50,-71,-20,-37,108,108,-34,69,109,63,-37,72,-27,127,-85,47, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant14_scale = { 96, { 0.0011133059160783887, 0.0015867544570937753, 0.0022868555970489979, 0.0028617582283914089, 0.0020642534364014864, 0.0013157036155462265, 0.0021300772204995155, 0.002065188717097044, 0.0020145408343523741, 0.0011786613613367081, 0.0031592894811183214, 0.0017738270107656717, 0.0023018058855086565, 0.0019208918092772365, 0.0026736448053270578, 0.0024420639965683222, 0.0024658865295350552, 0.0013762330636382103, 0.0025212937034666538, 0.0019826216157525778, 0.0025318320840597153, 0.0018362015252932906, 0.0012100086314603686, 0.0025084423832595348, 0.0023412841837853193, 0.0024680092465132475, 0.00093371188268065453, 0.0016387054929509759, 0.0027703042142093182, 0.0021813595667481422, 0.0015209633857011795, 0.0022817954886704683, 0.00097421673126518726, 0.0023985661100596189, 0.0018110119272023439, 0.002102383179590106, 0.0026219072751700878, 0.0016199942911043763, 0.0023524768184870481, 0.0016506459796801209, 0.0027422304265201092, 0.0034196232445538044, 0.0026489763986319304, 0.0039837900549173355, 0.0036179900635033846, 0.002968677319586277, 0.0021053324453532696, 0.0024129778612405062, 0.0023108525201678276, 0.002428028266876936, 0.0017563310684636235, 0.0023585783783346415, 0.0018228917615488172, 0.0022310283966362476, 0.003025369718670845, 0.0032253011595457792, 0.0024402707349509001, 0.0029991315677762032, 0.0015503182075917721, 0.0020029365550726652, 0.0035982884000986814, 0.0018176111625507474, 0.002027151407673955, 0.0019841010216623545, 0.0019927325192838907, 0.0013010863913223147, 0.0018761900719255209, 0.0022954735904932022, 0.0012312296312302351, 0.0027420821134001017, 0.0015783279668539762, 0.0025333277881145477, 0.0015756685752421618, 0.0023173494264483452, 0.0022696671076118946, 0.0018374999053776264, 0.002194215776398778, 0.0018606090452522039, 0.0022225750144571066, 0.0021432384382933378, 0.002257857471704483, 0.0022973788436502218, 0.0014646408380940557, 0.0024245276581496, 0.0022536227479577065, 0.0016578637296333909, 0.0021567014046013355, 0.0026368915569037199, 0.00082724133972078562, 0.0024837797973304987, 0.0035961277317255735, 0.0021965252235531807, 0.001055067521519959, 0.0018676355248317122, 0.0029639157000929117, 0.0019075056770816445, } };
const TfArray<96, int> quant14_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data15[16] = { -24680, -2600, 1498, -10336, 11029, -12771, 23118, -8125, 16681, -9561, 12053, 11081, -1460, -33799, 2455, 5977, };
const TfArray<1, int> tensor_dimension15 = { 1, { 16 } };
const TfArray<16, float> quant15_scale = { 16, { 7.592982001369819e-05, 7.8147291787900031e-05, 7.5187199399806559e-05, 5.7327742979396135e-05, 8.9321147243026644e-05, 0.00015872440417297184, 6.9442394305951893e-05, 5.3135656344238669e-05, 9.9201839475426823e-05, 8.6114807345438749e-05, 0.00010671144991647452, 8.615190745331347e-05, 8.2375554484315217e-05, 0.00010539480717852712, 8.1217542174272239e-05, 8.1034639151766896e-05, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[16*1*1*96] = { 
  /* [0][0][][] */ 22,19,29,26,3,-77,7,-17,-20,-76,12,-32,64,-59,61,30,-88,-41,39,-13,86,14,-84,2,9,79,127,60,24,69,69,-32,-6,-1,5,-29,26,27,-7,-6,119,24,12,-3,-6,-12,27,-42,28,-55,94,1,-72,1,39,28,-11,-40,6,6,1,25,-64,-16,21,-13,42,19,7,-32,27,23,9,40,3,37,50,-44,30,17,-5,53,44,22,-54,14,-19,61,22,10,-110,-18,2,29,119,95, 
  /* [1][0][][] */ 19,32,-35,-30,-2,-39,73,-64,-48,-33,-54,-15,-4,-34,-2,-36,-25,-35,-29,-14,-25,-72,95,-27,-9,3,-12,52,-32,8,-17,17,-39,17,11,22,-18,43,-42,81,27,-8,14,-38,39,-45,-13,57,-70,10,37,-95,-36,39,45,47,38,9,-73,10,-31,-11,1,-8,29,16,91,8,-39,-127,4,13,19,44,-25,24,-37,-10,88,-18,24,-16,28,-51,-23,-42,-7,-3,-18,-37,31,2,60,-51,-36,82, 
  /* [2][0][][] */ 8,-21,6,-12,70,56,-64,30,-58,54,13,-30,31,-10,9,35,29,-26,-127,11,-5,-26,-10,15,13,-14,-34,21,-50,-17,-15,67,-15,-36,2,15,-56,36,-21,-31,70,21,22,52,8,57,22,-15,-86,6,-16,36,-26,55,4,-66,9,33,58,43,-16,11,-25,45,36,-9,-43,-10,6,24,-21,-28,26,56,37,75,-56,-19,-30,-55,41,44,64,-9,-19,-50,-7,-43,-23,-37,-10,68,-7,-6,88,-66, 
  /* [3][0][][] */ 32,-54,-34,-110,0,-10,96,-37,-2,127,-77,-21,-5,-18,-30,58,55,52,-20,16,-42,6,23,-7,-37,77,48,-1,-54,-5,-66,52,8,-28,20,-28,18,-44,-23,50,-7,13,-19,30,48,-54,-8,10,59,-24,26,-35,110,44,21,-23,6,2,7,-27,-32,43,60,-10,-37,-30,108,-43,-28,9,-54,8,21,-77,20,-78,18,-52,119,-19,7,-49,-30,-44,-33,-44,76,71,-46,52,-57,11,6,-82,-23,23, 
  /* [4][0][][] */ -20,78,44,10,-7,16,-39,8,16,-31,12,-8,18,31,-18,28,-5,-52,-13,-57,22,-22,-53,28,-29,-35,-19,15,-37,127,-57,-6,-2,-40,1,-29,68,38,-33,-3,9,-1,34,-48,-48,-5,50,-22,5,-10,-57,-8,-61,30,41,18,-7,55,-21,19,-32,-58,-23,13,43,16,-64,8,-3,-6,7,-56,-5,59,54,63,-22,29,-65,47,11,59,20,-51,34,-53,-22,-61,-32,-43,-42,-13,-4,0,24,-37, 
  /* [5][0][][] */ -3,-8,50,-25,-13,-23,-16,-1,44,7,-11,9,-18,-25,28,-17,-8,-7,-51,-36,-27,19,-24,22,9,-49,55,-20,13,42,19,81,-15,-83,16,21,-37,-33,-34,9,-51,-15,-11,3,-1,20,-87,39,-18,13,45,-24,26,-73,8,14,-9,-62,-6,-44,42,11,29,47,-35,6,109,-22,-12,-40,15,22,-4,28,33,3,-4,-5,127,53,-26,-15,-48,29,47,77,6,87,4,-34,-8,19,15,-16,-35,36, 
  /* [6][0][][] */ 21,-55,57,6,-35,123,-51,-106,-27,-70,-74,90,-2,20,-46,94,4,53,4,-23,-87,-30,-83,-64,15,-59,-5,88,-127,63,-23,-22,49,78,-34,-1,-17,-26,24,-25,-70,48,45,-23,15,42,-102,-7,44,41,-83,-108,56,13,-52,-27,50,-9,17,-23,-19,-66,30,17,49,-94,-77,-68,-77,-7,-25,-78,-24,-82,34,-92,92,16,-80,31,-26,84,44,-66,68,-45,-11,27,-87,76,-65,106,41,-80,63,-101, 
  /* [7][0][][] */ -17,-19,-71,74,-31,6,31,-2,-109,13,71,44,-17,-56,-29,-53,-6,15,-5,15,-61,-27,-37,-63,61,55,9,73,-17,32,26,30,-57,-127,29,97,-2,24,-32,-5,-9,9,24,-73,24,66,78,67,-15,48,-42,10,29,-55,27,-54,-6,49,-68,-3,52,16,-1,-45,63,-49,95,-7,-51,-5,79,-9,-18,-37,-71,-23,22,-48,89,-41,7,-13,-50,-18,48,6,-84,40,-16,19,7,33,46,-18,98,-29, 
  /* [8][0][][] */ -4,-70,6,8,-19,-5,18,-23,-12,-14,43,45,28,28,-40,-11,71,1,13,-8,-14,-85,-36,-28,-9,-28,59,-18,-26,36,-18,-29,-13,-3,-12,-1,-50,-25,20,-11,11,42,9,-40,17,-25,33,-15,22,-1,43,-1,-23,6,-50,-4,-22,116,-67,-11,-28,-72,-64,3,-68,-36,-19,9,-25,14,30,-34,-43,-127,35,-106,6,11,-56,5,-34,-9,19,59,67,-71,-45,28,-38,82,9,-38,-45,7,0,-64, 
  /* [9][0][][] */ -28,-35,-36,22,7,24,2,34,-51,6,58,64,-31,58,20,-45,-21,37,-20,-38,10,34,-2,3,-16,22,6,28,24,-4,14,-13,-11,-24,0,57,-16,-1,27,-6,-13,-26,13,-2,8,40,8,34,-45,15,-18,42,127,22,-19,-2,18,-6,38,34,-33,6,79,10,8,17,62,4,39,5,-28,17,10,-124,-33,-121,-30,-10,37,-18,0,34,20,-34,38,14,-52,-5,-10,115,40,38,47,28,-14,19, 
  /* [10][0][][] */ 16,45,-6,-4,-31,29,-43,-10,68,5,-59,21,21,5,-9,-60,-32,2,16,5,34,-13,-20,-38,23,-20,-101,49,-37,53,-20,12,21,26,-19,-15,26,-7,12,2,51,0,46,-46,-25,-4,26,21,25,13,7,-29,-14,-28,-6,39,-16,17,-10,9,-13,-17,-8,6,-7,-9,-91,-27,-56,-2,35,-20,-22,27,28,13,54,-12,-95,6,-20,33,9,12,-7,-1,-72,-127,-17,32,7,33,54,-35,15,27, 
  /* [11][0][][] */ 19,-50,-6,14,-47,43,5,14,68,-27,-26,-76,26,4,9,-25,-23,48,30,-58,8,29,15,-35,44,25,64,-13,12,-62,-25,6,15,89,-95,-9,12,-12,58,5,-39,60,-27,17,-47,5,15,-27,57,-22,-21,-6,-24,-1,-85,86,-47,15,1,-3,21,31,-17,-68,-11,-46,-127,-71,-4,-21,-91,32,37,19,-5,9,27,37,-106,-41,-4,-5,3,6,-34,-10,52,68,23,-51,-6,13,-41,37,86,24, 
  /* [12][0][][] */ 19,14,-40,-29,21,-30,4,30,43,-34,18,-32,4,-9,-9,16,7,-32,-15,16,20,49,8,48,-35,-42,-127,-1,93,-26,44,-6,-12,-85,62,-15,15,-4,-1,13,-12,-60,-1,34,38,-9,20,-18,-72,-14,-57,100,81,-20,32,-88,18,10,-19,-44,26,42,79,0,-17,-19,27,21,120,42,19,21,8,-26,-11,-12,-32,-59,40,-78,39,-45,38,-46,3,1,9,-110,-14,40,-34,21,3,65,9,51, 
  /* [13][0][][] */ -23,17,-71,5,27,28,-13,30,25,78,-39,60,-73,-28,44,-50,15,28,54,16,-38,-33,-7,17,42,48,-17,44,1,47,57,-23,-28,68,7,58,23,-33,-48,-53,12,-34,39,16,46,57,-46,37,-40,45,7,-16,-16,-40,46,30,31,-19,-17,13,30,45,7,-36,7,69,127,51,33,0,-41,4,40,65,-77,74,24,-61,112,-23,-7,-44,31,40,20,62,-32,-29,-9,-20,6,67,38,24,56,64, 
  /* [14][0][][] */ -5,52,26,9,-34,-40,21,39,-62,-18,61,1,-70,-3,69,-16,-39,29,-47,15,-25,45,-90,13,-39,1,-48,-94,9,3,36,73,-66,24,13,-16,-20,-69,-11,-38,19,-30,45,-29,-7,32,-66,22,-7,-44,70,32,-1,29,-9,19,-53,8,13,44,47,53,-5,35,15,-51,-16,-64,45,72,71,34,-34,23,9,10,21,-4,15,17,-61,104,-3,-127,75,1,-2,12,-86,-9,-24,1,-30,20,37,42, 
  /* [15][0][][] */ 65,-26,17,29,44,7,-18,-6,17,29,-56,-27,65,62,-10,-16,-13,12,-70,42,14,-43,19,26,65,-35,97,12,26,-30,-33,45,69,45,-14,-80,41,71,66,41,80,40,-28,20,-45,-99,47,-40,-42,-15,-21,16,0,-48,-34,58,-21,7,0,13,-4,-53,-34,32,30,38,-72,34,-5,-41,-13,-6,3,-127,-32,-95,-15,16,-114,18,72,-29,43,29,-54,-16,-1,-19,27,87,16,-59,-39,-41,29,-49, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant16_scale = { 16, { 0.0032270173542201519, 0.0033212597481906414, 0.0031954559963196516, 0.0024364290293306112, 0.0037961485795676708, 0.0067457873374223709, 0.002951301634311676, 0.0022582653909921646, 0.0042160782031714916, 0.0036598793230950832, 0.0045352363958954811, 0.0036614560522139072, 0.0035009610000997782, 0.004479279275983572, 0.0034517454914748669, 0.0034439722076058388, } };
const TfArray<16, int> quant16_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[96] = { 11855, 511, -10350, 7574, -1740, 1025, -142, -1431, 5886, -4698, -1079, -840, 8544, -3586, -2732, -8629, 1137, 2189, -7184, 1874, -1953, 155, -6975, 2304, 100, 3660, -9264, -4497, 922, -2339, -951, 1891, 18189, -300, -3357, -460, -79, 10277, 7023, 8446, 1834, 8758, -1019, 4940, 1044, -1452, 12727, 6361, -6738, 573, -4568, 3934, -959, -3270, -1911, 1950, -207, 3309, -824, -333, 174, -917, 493, 7000, 10184, 1016, 15716, 7577, -3305, -2157, 9594, 154, -148, 2748, -2091, 613, 17036, 12937, 12257, 15675, 13087, -1102, 11152, 7618, -2169, -772, 9991, -7452, 10635, 5, -8204, -773, -635, 170, 29973, -1635, };
const TfArray<1, int> tensor_dimension17 = { 1, { 96 } };
const TfArray<96, float> quant17_scale = { 96, { 8.3481536421459168e-05, 0.00025995864416472614, 0.00010558176290942356, 0.0001383251219522208, 0.00023723725462332368, 0.00057605037000030279, 0.00015320524107664824, 0.000206420460017398, 0.00030805397545918822, 0.00019350464572198689, 0.00039423792622983456, 0.00018277413619216532, 0.00014101894339546561, 0.00012882292503491044, 0.00028212700271978974, 0.00013629328168462962, 0.00028283466235734522, 0.00033666915260255337, 0.00016649546159897, 0.000410763721447438, 0.00028360873693600297, 0.00027691543800756335, 9.9513606983236969e-05, 0.000186013407073915, 0.0012708450667560101, 0.00025822510360740125, 0.00023386352404486388, 0.0001785458589438349, 0.00037706401781179011, 0.00018621174967847764, 0.00020497426157817245, 0.00030595806310884655, 7.8592005593236536e-05, 0.0004660294798668474, 0.00017579768609721214, 0.00019084964878857136, 0.00040500177419744432, 0.00011579509737202898, 0.00016991047596093267, 0.00011198486026842147, 0.00062706682365387678, 0.00014611588267143816, 0.00026529570459388196, 0.00015978269220795482, 0.00017841524095274508, 0.00037036047433502972, 0.00014389101124834269, 0.00017357931938022375, 0.00016497846809215844, 0.00034345011226832867, 0.00025284776347689331, 0.00023344942019321024, 0.00015241315122693777, 0.00025586626725271344, 0.00033894256921485066, 0.00035418398329056799, 0.00017178009147755802, 0.00047678014379926026, 0.00044591166079044342, 0.0004263101436663419, 0.00028587790438905358, 0.00027223894721828401, 0.00014868339349050075, 0.00013364499318413436, 0.00026876217452809215, 0.00047362098121084273, 0.00010026046220446005, 0.00015564632485620677, 0.00025149938301183283, 0.00042209582170471549, 0.00010347064380766824, 0.00033100554719567299, 0.00066265271743759513, 0.00018511257076170295, 0.00020272895926609635, 0.00025455938884988427, 6.9328569225035608e-05, 0.00010409543756395578, 0.00010406126239104196, 0.00016461126506328583, 9.0807479864452034e-05, 0.00026564535801298916, 0.00010640997061273083, 0.00039576028939336538, 5.8234247262589633e-05, 0.00039974035462364554, 0.00012539692397695035, 0.00020837385090999305, 0.00010514261521166191, 0.0002471557236276567, 0.00010054324229713529, 0.00026532119954936206, 0.00029578714747913182, 0.00019423285266384482, 5.341471842257306e-05, 0.00030214406433515251, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data18[1*3*3*96] = { 
  /* [0][0][][] */ -22,2,63,-57,87,-3,40,-25,-17,3,-9,-59,-18,10,0,-36,-22,4,-26,-24,-8,36,11,37,5,2,-30,-10,12,31,45,-6,-1,1,17,-38,-9,-17,-76,-8,-11,-87,43,-72,-35,42,-80,-48,-31,-9,1,40,-73,7,50,-15,-33,-13,12,-21,-20,-25,4,-22,-18,-23,-35,12,-16,42,-39,-12,30,8,-1,6,-12,-10,127,-59,-61,15,-58,-16,4,-12,19,21,-32,-14,61,-54,18,27,-91,-5, 36,41,127,-74,-44,1,127,-59,-11,-6,-32,-16,-36,17,-68,126,-12,76,55,-35,3,127,46,107,32,37,33,52,108,38,127,-48,-98,-18,-63,-28,-16,-82,127,-71,-24,-127,-15,-54,55,-19,-62,-38,58,-20,31,119,-77,52,-71,-6,-75,-5,3,27,-19,-127,-127,-22,-48,-1,2,-103,-7,37,-59,92,-127,-13,-1,-22,-107,-97,5,-127,-100,6,50,-52,127,73,-114,51,-127,4,49,-14,16,127,-20,-89, -2,14,52,-36,42,6,68,-33,-32,10,-7,26,-58,13,-1,17,-20,2,-19,-24,-15,21,30,13,0,7,-2,-29,21,29,55,6,-59,4,15,75,-7,-41,-35,-8,-8,13,15,-47,-29,-22,-98,-43,-17,-12,0,28,13,-22,2,-13,69,-18,16,-18,-17,-14,-70,5,-28,-51,127,-17,-7,39,7,2,25,8,-18,14,22,19,-42,-75,-127,5,-86,-34,49,-25,-4,-19,-81,-38,12,64,8,41,-80,-8, 
  /* [0][1][][] */ -116,4,67,-50,43,84,-20,-20,-17,-29,-22,-21,-127,22,14,127,-21,34,55,13,12,-22,127,-49,27,30,54,18,-18,3,-5,-32,-127,-16,73,-25,-5,-127,-85,-127,-29,-47,97,-8,-76,127,-66,-110,66,48,17,-52,-116,82,90,-26,27,-33,41,-13,12,-14,95,-127,-36,17,-19,-37,6,-3,-127,4,62,127,19,-66,-127,-99,-52,-14,-55,1,-46,-52,82,22,-127,75,-85,127,81,-85,127,-5,-91,-3, 111,127,117,127,-127,-127,50,-52,127,127,-72,-79,-54,127,-23,42,127,-127,127,127,127,-90,110,-127,-127,-127,127,127,-127,127,-15,127,-127,127,127,-87,127,64,3,-42,127,-7,-127,-88,127,-16,127,127,127,-127,127,-127,108,127,-127,127,-127,127,-127,127,-108,126,78,-110,127,127,-23,127,-89,-127,9,-127,19,110,127,71,1,-127,101,-105,42,127,79,127,94,63,-99,127,-82,56,-12,-17,-100,-28,-113,-16, -127,-31,91,-48,21,46,-58,0,-46,-22,0,127,-82,24,22,116,-27,42,48,4,10,-27,92,-52,32,21,39,15,-9,-18,20,-24,-126,-26,91,127,2,-98,-102,-42,-34,-19,35,11,-72,-59,-92,-127,52,59,1,-37,127,0,106,-42,89,-35,51,-23,1,-23,-125,-75,-74,-21,-53,-101,-8,6,-58,-8,46,-102,-14,127,-43,-47,-56,6,-111,-8,-72,-78,25,24,-103,37,1,-83,127,127,-44,-16,-127,-5, 
  /* [0][2][][] */ -69,-52,-18,-14,42,-5,-4,26,-24,9,34,-23,6,4,-2,-45,-4,-21,-32,-33,-1,-8,48,-50,-4,0,1,5,-10,-29,-42,-9,22,1,4,-58,-3,7,-43,7,-35,-17,35,44,17,19,-75,-16,-21,2,-7,-39,-1,-35,36,-19,40,-26,10,-13,1,31,5,31,-41,-22,124,73,43,21,-39,-5,-6,-17,-9,-35,-37,-15,-21,-21,-21,-5,-106,-12,24,-8,43,-15,-30,3,-37,-40,-11,-5,-64,13, -88,-93,4,-52,-20,-6,18,127,-64,124,127,-37,-3,23,127,97,-16,-61,74,-58,-24,-42,106,25,16,-5,42,28,-7,-20,-95,-55,-66,-28,-118,-9,-82,-99,49,-35,-19,-86,-35,127,28,-13,-32,-10,51,-13,-3,-22,70,23,-65,-38,-73,-47,47,-28,127,30,92,24,-82,-45,-24,-68,127,38,-73,11,37,-57,12,-49,-74,-32,5,40,-75,-31,-91,-57,76,-127,29,1,-33,2,33,-8,3,-104,-58,127, -86,-15,-8,-20,49,-9,-6,25,-28,4,18,44,40,6,1,-47,-4,-14,-23,-35,-6,-16,18,-27,-4,-7,-10,2,0,-34,-36,0,84,9,-18,18,-9,-53,-52,47,-32,-26,5,13,12,-23,-68,10,-15,13,-9,-39,1,-40,21,-8,68,-20,10,-2,14,40,6,15,-37,-29,-25,0,39,17,-26,0,-33,-58,-22,-21,-13,10,106,-25,-46,-8,-127,1,21,-3,70,-3,-16,-3,-13,29,-4,-19,-59,8, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0035479653161019087, 0.011048242449760437, 0.004487224854528904, 0.0058788172900676727, 0.01008258294314146, 0.024482140317559242, 0.0065112225711345673, 0.0087728695943951607, 0.013092293404042721, 0.008223947137594223, 0.016755111515522003, 0.007767900824546814, 0.0059933047741651535, 0.0054749739356338978, 0.011990397237241268, 0.0057924641296267509, 0.0120204733684659, 0.014308438636362553, 0.0070760566741228104, 0.017457457259297371, 0.012053370475769043, 0.011768906377255917, 0.004229328129440546, 0.0079055698588490486, 0.054010916501283646, 0.010974566452205181, 0.0099391993135213852, 0.0075881988741457462, 0.016025220975279808, 0.0079139992594718933, 0.0087114060297608376, 0.013003217987716198, 0.0033401602413505316, 0.019806252792477608, 0.0074714012444019318, 0.0081111099570989609, 0.017212575301527977, 0.0049212914891541004, 0.0072211953811347485, 0.0047593563795089722, 0.026650339365005493, 0.0062099248170852661, 0.011275066994130611, 0.0067907641641795635, 0.0075826477259397507, 0.015740320086479187, 0.0061153681017458439, 0.007377120666205883, 0.0070115849375724792, 0.014596628956496716, 0.010746030136942863, 0.0099216001108288765, 0.0064775589853525162, 0.010874316096305847, 0.014405058696866035, 0.015052818693220615, 0.0073006534948945045, 0.020263155922293663, 0.018951244652271271, 0.018118180334568024, 0.012149810791015625, 0.011570154689252377, 0.0063190441578626633, 0.0056799123995006084, 0.011422391980886459, 0.020128890872001648, 0.0042610694654285908, 0.0066149686463177204, 0.010688723996281624, 0.017939072102308273, 0.0043975021690130234, 0.014067735522985458, 0.028162740170955658, 0.0078672841191291809, 0.0086159808561205864, 0.010818773880600929, 0.0029464641120284796, 0.0044240560382604599, 0.0044226036407053471, 0.0069959787651896477, 0.0038593178614974022, 0.011289927177131176, 0.0045224237255752087, 0.01681981235742569, 0.002474955515936017, 0.016988964751362801, 0.0053293691016733646, 0.008855888620018959, 0.0044685611501336098, 0.010504118166863918, 0.0042730877175927162, 0.011276151053607464, 0.01257095392793417, 0.00825489591807127, 0.0022701255511492491, 0.012841122224926949, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data19[96] = { 1208, 4518, 320, 1129, 3848, 10988, 339, 1543, 8393, -906, 9771, 3004, 1599, 526, 3482, 110, 2301, 5228, -397, 14681, 919, 7272, -541, 1818, -5862, 1976, 2524, 1178, 5295, 864, 1739, 3415, 1731, 9362, 4348, 4214, 3294, 1258, 2952, 1820, 15052, 1110, 1356, 1930, 1899, 9359, 3670, 6699, 1203, -565, 1804, 5778, 2576, -3079, 6803, 59, 1735, 9500, 1266, 1518, 3000, 7198, 3394, 6, 13434, 9601, 1040, 3471, 4551, 2701, 2967, 1434, -6585, 4344, 1859, 3186, 202, 9578, 3066, 8038, 2197, 945, 3761, 14182, 315, 5969, 6304, 2285, -773, 2631, 1187, 7374, 2156, 1941, 3851, 2805, };
const TfArray<1, int> tensor_dimension19 = { 1, { 96 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00028661236865445971, 0.00015104407793842256, 0.00033728213747963309, 0.00027084429166279733, 0.0001794465642888099, 8.1048274296335876e-05, 0.00026201416039839387, 0.00017873146862257272, 0.00010559497604845092, 0.00021196917805355042, 8.526853343937546e-05, 0.00017786982061807066, 0.00021329363516997546, 0.00040391049697063863, 0.00015337178774643689, 0.00017686594219412655, 0.00024829513859003782, 0.00013614987256005406, 0.00016363305621780455, 6.2740313296671957e-05, 0.00026078964583575726, 0.00010594071500236169, 0.00045082339784130454, 0.000144753503263928, 0.00011626056948443875, 0.00011374804307706654, 0.0002088518813252449, 0.00029229893698357046, 0.00016496794705744833, 0.00026407753466628492, 0.00030548981158062816, 0.00016463552310597152, 0.00025140674551948905, 8.8507651526015252e-05, 0.00011960959818679839, 0.00016001042968127877, 0.00017671017849352211, 0.00027480337303131819, 0.00016235138173215091, 0.00019219859677832574, 6.3243627664633095e-05, 0.00021848437609151006, 0.00023722360492683947, 0.00014046693104319274, 0.0001768731017364189, 9.7099618869833648e-05, 0.00015631673159077764, 0.00011150736827403307, 0.00024701980873942375, 0.00028503997600637376, 0.00024190408294089139, 0.00012737681390717626, 0.00019227848679292947, 0.00014121970161795616, 0.00010766978812171146, 0.00031193273025564849, 0.00016578382928855717, 8.8540829892735928e-05, 0.00016635083011351526, 0.00019582659297157079, 0.00015548650117125362, 0.00011534322402440012, 0.00017146393656730652, 0.00021113987895660102, 7.2270129749085754e-05, 9.7362404630985111e-05, 0.00028222144464962184, 0.00017841965018305928, 0.00016229988250415772, 0.00017461257812101394, 0.00015822384739294648, 0.00015836270176805556, 9.6633637440390885e-05, 0.00015304864791687578, 0.00022859407181385905, 0.00020925416902173311, 0.00021102989558130503, 8.3308950706850737e-05, 0.0001718654966680333, 0.00011654877016553655, 0.00019737202092073858, 0.00019935306045226753, 0.00014471920439973474, 6.9920424721203744e-05, 0.00019455309666227549, 0.00012455609976314008, 0.00010996404307661578, 0.00021532982646021992, 0.00024732982274144888, 0.00022263231221586466, 0.00020787313405890018, 0.0001143219051300548, 0.00020901035168208182, 0.00020394964667502791, 0.0001533348549855873, 0.00019211915787309408, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data20[96*1*1*16] = { 
  /* [0][0][][] */ 32,15,0,34,-127,-14,102,42,43,76,-17,28,6,1,32,76, 
  /* [1][0][][] */ -7,-8,-60,25,127,94,-4,10,-21,13,-51,39,-21,58,-27,-27, 
  /* [2][0][][] */ -34,76,120,-2,76,67,-3,43,19,19,30,-18,63,-127,-11,2, 
  /* [3][0][][] */ 127,-32,12,1,48,34,1,8,38,38,-31,-12,-46,45,-15,54, 
  /* [4][0][][] */ -65,-26,41,35,-119,-61,-113,-58,-17,57,-56,-49,6,47,-17,127, 
  /* [5][0][][] */ -115,11,43,15,127,-1,21,23,-59,23,-31,-5,-60,90,-117,-33, 
  /* [6][0][][] */ -127,33,-26,38,-25,-88,77,18,22,-45,-46,33,10,-15,-53,5, 
  /* [7][0][][] */ 32,105,67,-103,59,14,127,-32,58,14,-12,49,109,-27,-36,-34, 
  /* [8][0][][] */ -57,-33,-49,94,-58,93,-40,-61,9,-58,99,55,122,61,-127,20, 
  /* [9][0][][] */ -28,-127,4,120,-42,-79,-34,63,50,49,12,79,-76,24,3,-18, 
  /* [10][0][][] */ -31,-44,-87,39,-106,127,21,-49,5,-59,42,-58,-9,28,-84,45, 
  /* [11][0][][] */ -52,-85,7,6,23,77,47,0,24,33,24,-87,6,127,-105,83, 
  /* [12][0][][] */ -30,-122,-123,102,-127,-125,49,67,88,59,-70,115,-20,-104,-12,-12, 
  /* [13][0][][] */ -59,-23,-29,-1,-9,-2,26,22,-13,127,-13,-17,39,35,17,-14, 
  /* [14][0][][] */ -82,-35,-61,-34,-32,54,-16,-81,127,-69,83,-13,81,-87,-29,-85, 
  /* [15][0][][] */ 7,-127,92,-48,-50,-35,7,60,14,-47,-92,-27,89,-36,-25,-53, 
  /* [16][0][][] */ -19,-29,27,-45,35,28,-25,-33,68,-127,40,-8,-1,11,-92,-98, 
  /* [17][0][][] */ -32,-11,9,-124,-3,-11,-31,27,114,-79,38,55,126,-83,-36,-127, 
  /* [18][0][][] */ 60,12,-48,-119,-3,-6,127,-61,10,45,-2,52,-15,57,-16,-108, 
  /* [19][0][][] */ -46,-38,-48,-77,-92,103,22,-18,36,-42,26,-127,-1,6,-39,-7, 
  /* [20][0][][] */ 14,71,85,-94,99,-3,-39,127,-95,-111,42,-91,-6,121,-23,-14, 
  /* [21][0][][] */ -4,-87,-118,19,76,3,91,127,-68,-98,-3,34,108,-90,-38,50, 
  /* [22][0][][] */ 20,-3,59,-20,-1,20,70,20,37,92,19,5,-5,-10,127,-11, 
  /* [23][0][][] */ -127,-77,-5,64,68,71,62,13,-59,6,-33,-116,1,80,50,103, 
  /* [24][0][][] */ -5,-34,63,49,9,-99,-9,-16,-2,127,-87,39,-30,-30,49,-26, 
  /* [25][0][][] */ 127,-78,110,103,45,-27,-15,48,-111,100,53,-22,10,64,53,-25, 
  /* [26][0][][] */ -27,25,9,42,-56,118,-17,39,-60,-37,-76,34,6,20,44,-127, 
  /* [27][0][][] */ 36,-2,-2,-54,-51,-8,-93,21,-111,-23,-83,-50,-84,51,-30,127, 
  /* [28][0][][] */ -53,30,16,2,11,-41,-127,-13,0,-39,3,-16,22,-51,-61,-39, 
  /* [29][0][][] */ -22,-127,-17,90,-33,7,103,0,76,52,-108,50,19,-35,-37,69, 
  /* [30][0][][] */ 62,-18,-48,23,-127,4,30,-27,-9,15,7,-8,34,51,-6,50, 
  /* [31][0][][] */ -127,-28,22,94,-38,-2,-68,11,-13,-56,3,-27,-24,-49,-34,71, 
  /* [32][0][][] */ -93,-75,-75,-12,-82,-41,0,-34,127,51,-64,-47,55,25,13,-38, 
  /* [33][0][][] */ -1,50,-117,19,-127,-74,65,-13,-86,13,-46,-71,-27,70,87,67, 
  /* [34][0][][] */ 21,76,1,40,-69,-47,45,-4,4,-123,-9,33,-60,3,39,127, 
  /* [35][0][][] */ 23,-36,-31,-42,-108,11,124,-63,54,120,-5,-37,20,127,5,67, 
  /* [36][0][][] */ 9,-7,-47,62,127,-4,47,66,-74,21,-87,-56,25,-32,-4,12, 
  /* [37][0][][] */ -127,40,-11,-73,35,-88,-38,-23,7,-31,-12,45,49,-98,25,-122, 
  /* [38][0][][] */ 82,66,23,-27,-96,-39,-127,-55,-31,-50,28,54,-39,-116,80,-31, 
  /* [39][0][][] */ -8,-29,-8,64,-2,83,81,-57,-36,38,33,-30,-41,109,35,127, 
  /* [40][0][][] */ 127,54,88,110,-47,-49,-11,37,-77,105,5,-1,-48,-24,87,-4, 
  /* [41][0][][] */ -15,-4,4,37,-110,123,14,54,-52,15,-107,9,1,21,68,-127, 
  /* [42][0][][] */ 10,-80,27,-6,127,11,60,6,-23,-69,-53,5,-5,8,-24,35, 
  /* [43][0][][] */ -41,-100,-40,11,104,35,-39,73,-35,-72,-127,-79,88,-59,-81,60, 
  /* [44][0][][] */ -32,-52,-63,-98,12,73,36,-16,-36,-127,-84,81,-23,49,14,68, 
  /* [45][0][][] */ -1,-72,-83,5,-127,91,-26,-70,58,-16,34,-72,-1,39,-81,32, 
  /* [46][0][][] */ 84,-104,-41,-26,82,-82,-3,122,13,-40,75,91,-59,-93,121,-127, 
  /* [47][0][][] */ -104,-63,-23,77,-47,-7,55,28,4,95,86,62,-35,95,27,127, 
  /* [48][0][][] */ 41,-12,-83,-90,31,-63,9,53,45,-79,2,21,-58,2,-45,-127, 
  /* [49][0][][] */ 68,17,12,38,-4,-27,24,51,-10,127,-35,50,-13,-30,69,64, 
  /* [50][0][][] */ 2,0,15,12,-127,-14,-11,-49,54,20,26,48,-23,-63,20,-2, 
  /* [51][0][][] */ 16,21,22,-127,-64,78,52,-65,40,-14,74,-78,94,57,-23,-27, 
  /* [52][0][][] */ 29,-31,5,-81,93,-122,-17,-36,34,5,127,-52,39,13,-37,96, 
  /* [53][0][][] */ -58,-61,35,-26,-53,-127,28,-113,-4,81,-92,90,-42,-17,13,-89, 
  /* [54][0][][] */ 55,77,43,-5,-127,-31,-101,-121,-35,41,99,65,-115,-51,58,27, 
  /* [55][0][][] */ 28,-5,-21,89,-43,23,39,-16,8,127,15,70,18,-7,9,27, 
  /* [56][0][][] */ 60,-124,-52,127,-60,33,-25,84,111,33,48,97,-24,-30,65,59, 
  /* [57][0][][] */ 91,-1,68,-64,82,1,-40,1,67,-6,12,127,56,-47,87,-55, 
  /* [58][0][][] */ 81,-60,61,-27,-13,-25,-34,127,8,104,-11,40,40,34,75,-16, 
  /* [59][0][][] */ -27,49,20,-51,13,-76,-20,10,31,46,-103,-108,-127,-83,84,-22, 
  /* [60][0][][] */ 47,-25,7,5,30,-12,39,-49,22,127,-20,80,-6,-20,-32,-28, 
  /* [61][0][][] */ 67,66,17,-26,-89,-127,-16,-67,-78,-12,-24,-12,-51,-39,80,68, 
  /* [62][0][][] */ -9,86,-39,55,-54,127,-65,47,-86,20,-53,61,-34,59,77,-98, 
  /* [63][0][][] */ 30,4,-78,-127,-16,-47,44,-2,17,-94,-18,20,-52,54,42,-23, 
  /* [64][0][][] */ -43,13,23,-24,59,-72,19,84,-127,-9,-73,-41,-31,81,41,53, 
  /* [65][0][][] */ -57,-34,-18,3,60,27,-56,-56,-127,-41,-4,-3,-99,126,-43,30, 
  /* [66][0][][] */ -4,46,-9,46,-32,127,-36,23,-39,27,-28,53,-20,31,46,-88, 
  /* [67][0][][] */ 14,-23,-58,-33,16,-78,61,-98,-6,31,18,127,-69,-37,-15,-109, 
  /* [68][0][][] */ 23,-127,-38,82,2,-25,-23,69,43,44,49,58,-61,15,-15,-6, 
  /* [69][0][][] */ 39,37,33,-69,30,-39,-31,75,23,68,60,98,127,-24,92,-91, 
  /* [70][0][][] */ 55,23,49,-26,109,7,-100,-63,-127,-97,-7,58,-18,84,-107,-9, 
  /* [71][0][][] */ -50,-81,1,-66,58,-1,53,14,-71,57,-127,-67,-19,83,-33,62, 
  /* [72][0][][] */ 14,8,72,25,-48,-3,-127,-51,-17,101,7,76,19,109,-118,4, 
  /* [73][0][][] */ 13,-47,-12,-32,44,-127,27,-63,93,93,98,-4,44,-23,-64,123, 
  /* [74][0][][] */ 2,6,-31,71,-86,-2,95,20,82,58,31,108,127,19,-57,10, 
  /* [75][0][][] */ -33,41,-14,38,-53,127,-10,6,-41,24,-54,43,-6,59,24,-70, 
  /* [76][0][][] */ -82,86,-73,61,-127,18,-12,13,53,42,-22,-47,46,-34,-125,50, 
  /* [77][0][][] */ 94,99,-127,126,42,68,71,58,30,-2,106,-46,65,38,77,64, 
  /* [78][0][][] */ 32,-62,12,-40,86,-127,15,-54,37,60,122,-17,23,-17,-51,118, 
  /* [79][0][][] */ -39,63,-11,25,-6,-53,-38,-22,-127,-9,78,8,116,45,-90,-44, 
  /* [80][0][][] */ -83,10,70,3,75,57,0,-127,-70,61,-65,-48,-9,-96,-1,70, 
  /* [81][0][][] */ 86,71,-17,1,13,-54,61,111,-93,121,-47,-39,-54,17,112,127, 
  /* [82][0][][] */ 30,99,-46,-61,-26,-30,127,-100,26,5,-33,54,106,-19,84,-45, 
  /* [83][0][][] */ 11,-39,23,32,5,21,-36,-104,53,-27,98,19,37,-58,-66,-127, 
  /* [84][0][][] */ -127,-115,-31,-3,0,86,74,-17,62,91,105,123,60,123,-70,10, 
  /* [85][0][][] */ 102,20,63,-37,127,24,7,93,36,94,-46,8,-64,39,115,53, 
  /* [86][0][][] */ -109,76,-53,-4,28,84,17,28,85,35,127,-52,-43,69,4,2, 
  /* [87][0][][] */ 8,-59,23,-46,43,-127,28,-39,44,-12,66,-39,36,-44,-41,69, 
  /* [88][0][][] */ -94,72,29,-4,105,-27,41,13,-75,-77,107,-73,52,127,59,-118, 
  /* [89][0][][] */ -24,35,-9,31,-30,127,-21,33,-52,14,-48,25,-3,64,17,-93, 
  /* [90][0][][] */ 46,-74,29,15,127,1,62,23,9,-104,-103,-33,-8,-12,-58,40, 
  /* [91][0][][] */ 18,54,-1,23,16,-84,-127,4,-76,57,-70,-41,-118,-58,-8,18, 
  /* [92][0][][] */ 86,40,46,50,-127,-86,-20,1,-8,38,-20,-26,-23,-94,29,-6, 
  /* [93][0][][] */ 2,-94,-127,101,-42,-63,-44,109,106,91,17,76,-62,54,-29,-25, 
  /* [94][0][][] */ 64,-14,127,-34,33,-19,31,33,27,73,-16,48,22,-5,115,-30, 
  /* [95][0][][] */ -31,-38,-19,-25,127,-5,42,75,-37,4,-67,-18,2,23,-49,39, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant20_scale = { 96, { 0.0045532644726336002, 0.002399560296908021, 0.0053582293912768364, 0.0043027652427554131, 0.0028507760725915432, 0.0012875726679340005, 0.0041624852456152439, 0.0028394157998263836, 0.0016775336116552353, 0.0033674463629722595, 0.001354617765173316, 0.0028257272206246853, 0.0033884872682392597, 0.00641672033816576, 0.0024365393910557032, 0.0028097790200263262, 0.0039445385336875916, 0.0021629435941576958, 0.002599555067718029, 0.0009967234218493104, 0.0041430322453379631, 0.0016830260865390301, 0.0071620014496147633, 0.0022996251937001944, 0.0018469723872840405, 0.0018070571823045611, 0.0033179232850670815, 0.0046436041593551636, 0.0026207617484033108, 0.0041952650062739849, 0.0048531610518693924, 0.0026154806837439537, 0.0039939708076417446, 0.0014060758985579014, 0.0019001767504960299, 0.0025420042220503092, 0.0028073044959455729, 0.0043656611815094948, 0.0025791935622692108, 0.0030533610843122005, 0.0010047192918136716, 0.0034709498286247253, 0.0037686505820602179, 0.0022315264213830233, 0.0028098928742110729, 0.0015425721649080515, 0.0024833241477608681, 0.0017714607529342175, 0.0039242776110768318, 0.0045282850041985512, 0.0038430069107562304, 0.0020235704723745584, 0.0030546302441507578, 0.002243485301733017, 0.0017104950966313481, 0.0049555161967873573, 0.002633723197504878, 0.0014066030271351337, 0.002642730949446559, 0.0031109973788261414, 0.0024701347574591637, 0.0018323990516364574, 0.00272396020591259, 0.0033542716410011053, 0.0011481187539175153, 0.0015467469347640872, 0.0044835084117949009, 0.0028344620950520039, 0.0025783753953874111, 0.0027739810757339001, 0.0025136217009276152, 0.0025158275384455919, 0.0015351693145930767, 0.0024314059410244226, 0.0036315575707703829, 0.0033243142534047365, 0.0033525244798511267, 0.0013234867947176099, 0.0027303395327180624, 0.001851550885476172, 0.0031355486717075109, 0.0031670203898102045, 0.0022990801371634007, 0.0011107901809737086, 0.003090765792876482, 0.0019787591882050037, 0.0017469427548348904, 0.0034208351280540228, 0.0039292029105126858, 0.0035368460230529308, 0.0033023746218532324, 0.0018161737825721502, 0.0033204408828169107, 0.0032400439959019423, 0.0024359526578336954, 0.0030520991422235966, } };
const TfArray<96, int> quant20_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[16] = { -8539, 11150, -18877, 3426, 10762, -15097, -39398, -9402, -4782, 9384, -15409, -14485, 7059, -11111, -5080, -2160, };
const TfArray<1, int> tensor_dimension21 = { 1, { 16 } };
const TfArray<16, float> quant21_scale = { 16, { 0.00011704507051035762, 0.0001302197779295966, 0.00012881967995781451, 0.00016975575999822468, 8.6460415332112461e-05, 0.00014579840353690088, 0.00011455800267867744, 0.00014732120325788856, 0.00011842484673252329, 7.4590410804376006e-05, 0.00016323808813467622, 0.00015857731341384351, 0.00010600678797345608, 8.7893378804437816e-05, 0.00014567341713700444, 0.00013935595052316785, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data22[16*1*1*48] = { 
  /* [0][0][][] */ 25,37,36,-31,66,83,-30,56,-20,110,5,51,-34,34,3,43,36,95,46,-64,-75,85,-10,53,70,51,39,58,-43,-46,-3,84,-17,10,-72,43,53,-127,-39,21,20,-18,60,2,2,-40,-69,-6, 
  /* [1][0][][] */ -50,-2,-82,-51,1,93,-63,18,-18,-38,-42,36,55,-24,-32,-27,-23,-33,-3,32,-67,53,-114,-52,-52,-42,64,70,-19,-31,46,-50,20,-65,-37,55,12,-63,127,-42,-23,31,-53,-24,32,54,34,31, 
  /* [2][0][][] */ -7,11,54,-38,-7,-74,10,23,95,70,-61,9,100,-39,127,64,-67,-27,-24,35,84,-88,-28,-82,3,-40,36,-59,38,35,-48,9,29,-19,65,53,-71,5,6,-36,27,33,63,-21,28,-82,94,-60, 
  /* [3][0][][] */ 40,10,-34,-32,28,113,16,-13,53,-62,23,-26,-46,15,10,43,-39,-69,37,-127,-12,-6,-23,-15,-43,88,124,60,-19,-44,27,44,55,-35,95,41,-42,-61,4,40,21,-7,-12,2,22,18,-4,-27, 
  /* [4][0][][] */ 96,8,13,-36,102,83,43,27,73,-13,-105,20,38,-4,6,-11,-99,-122,-25,-88,-17,19,-30,-5,-80,127,-91,127,-68,-59,24,84,38,-41,29,-26,-20,8,-23,31,-54,-15,-1,64,-51,100,-15,-51, 
  /* [5][0][][] */ 5,-19,-63,8,-22,53,26,-31,68,63,35,82,59,-19,39,2,-46,127,-18,35,17,-4,-68,-20,32,-2,-73,-39,-11,25,14,-12,-42,-2,40,12,-44,8,-92,-11,100,-17,27,54,-19,14,-40,26, 
  /* [6][0][][] */ 59,-1,22,71,10,-26,101,-48,0,67,127,100,31,52,-54,58,29,-34,-77,83,59,-70,-41,56,-75,86,88,0,102,53,-22,1,92,-48,-114,-12,85,32,4,-1,7,62,55,-37,53,111,38,2, 
  /* [7][0][][] */ -94,-6,-29,29,-54,-54,14,50,77,109,-51,-69,-92,13,-24,-17,-73,95,-2,120,-53,33,24,41,-19,-88,-27,-72,27,40,-3,8,-21,8,20,-13,0,-60,127,25,8,35,25,-16,51,63,-25,-3, 
  /* [8][0][][] */ -12,-94,51,-55,50,-58,69,-46,-33,-114,31,13,-31,-2,30,29,4,9,-47,107,-3,40,-24,18,69,-8,-63,-39,-127,-18,-53,-117,8,-63,2,75,-3,36,106,8,13,3,67,113,-12,-74,-46,86, 
  /* [9][0][][] */ 20,-39,21,-59,41,75,-31,52,22,-41,-48,-20,17,-43,111,-12,-1,-127,42,38,-68,33,58,-31,-19,-82,-23,73,52,69,-42,-22,-45,29,-5,124,-26,-48,-58,-19,-24,-2,39,103,44,76,-65,7, 
  /* [10][0][][] */ -13,22,-28,-5,19,32,-70,-38,52,38,70,-8,-41,-12,47,-46,-54,127,6,51,7,-14,22,27,-43,39,6,91,41,4,-33,-7,76,0,-8,21,-9,-54,-39,19,-91,-1,32,-23,21,36,31,33, 
  /* [11][0][][] */ -38,46,-20,47,26,60,3,5,16,17,-127,-68,74,17,-19,-47,6,31,-47,-45,-17,-1,105,6,58,16,-17,29,-2,30,-6,48,34,4,-47,-8,45,81,106,39,40,-57,64,-10,-53,-24,82,6, 
  /* [12][0][][] */ -61,-1,38,19,-64,-56,11,5,-34,-36,-127,12,67,-90,23,37,45,99,81,-125,-26,39,-38,-88,-3,-21,34,-37,14,12,-21,78,66,67,28,-32,-53,-31,24,-10,-29,19,63,2,37,-18,-39,-38, 
  /* [13][0][][] */ -60,-127,-58,-119,8,15,69,16,-124,26,123,-56,60,48,121,7,126,22,-3,-107,94,-92,126,2,-86,8,-25,12,-47,-111,-121,22,53,-40,-84,75,38,-66,87,-73,-15,63,78,44,45,-36,123,-72, 
  /* [14][0][][] */ 62,17,-51,12,-42,22,-86,-30,-34,60,61,51,-14,-58,13,-49,56,-106,16,16,82,-60,19,5,-8,127,-89,16,-53,-17,-83,-4,116,40,97,-24,-88,17,-18,80,-4,-49,102,-29,-54,-33,-60,54, 
  /* [15][0][][] */ -62,23,41,2,102,9,-2,36,25,78,-22,45,52,-15,-27,-17,-1,34,10,-36,28,-46,-48,-48,51,-68,-43,64,-39,1,9,7,-54,-2,127,-1,-85,11,59,-17,-45,-18,22,2,-35,-33,-13,3, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant22_scale = { 16, { 0.0049744155257940292, 0.0055343401618301868, 0.0054748360998928547, 0.0072146197780966759, 0.0036745674442499876, 0.0061964322812855244, 0.0048687150701880455, 0.0062611508183181286, 0.0050330557860434055, 0.0031700923573225737, 0.0069376188330352306, 0.0067395358346402645, 0.0045052883215248585, 0.003735468490049243, 0.0061911200173199177, 0.0059226276353001595, } };
const TfArray<16, int> quant22_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data23[48] = { 14126, -1178, 18846, -913, 18985, -2478, 46018, 451, 13351, 35987, 2152, 22871, 1396, 16282, 36415, 28612, -83, 7212, 7120, 56883, 69, 23791, 2689, 15700, 20119, 33669, 611, -2121, -3043, 18420, 19869, -494, 2046, -291, -865, 16726, 10084, 35969, -80, 20855, 27334, 2382, 2386, 16506, 3255, 1393, 42512, 29055, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.9218880273401737e-05, 9.8397023975849152e-05, 7.0961199526209384e-05, 0.00015808778698556125, 9.2607784608844668e-05, 8.3315193478483707e-05, 4.0702576370676979e-05, 0.00018108621588908136, 0.00013430170656647533, 6.1763596022501588e-05, 6.2528015405405313e-05, 9.8215350590180606e-05, 6.5022926719393581e-05, 7.1596718044020236e-05, 4.9958634917857125e-05, 5.7725937949726358e-05, 0.00010481082426849753, 4.9125701480079442e-05, 0.00014147437468636781, 3.9126021874835715e-05, 8.2741840742528439e-05, 6.4119849412236363e-05, 8.0460908066015691e-05, 0.00010571873281151056, 5.5619741033297032e-05, 6.4395659137517214e-05, 5.5678447097307071e-05, 5.8991117839468643e-05, 0.00024558859877288342, 5.9480655181687325e-05, 5.518509351531975e-05, 0.00016402291657868773, 7.517810445278883e-05, 0.00019395540584810078, 0.00010969225695589557, 8.7548221927136183e-05, 0.00012414128286764026, 4.7034871386131272e-05, 0.00010649831529008225, 8.8162712927442044e-05, 5.7193061365978792e-05, 0.00021237866894807667, 0.00012578486348502338, 8.4194980445317924e-05, 0.0001583426637807861, 4.5066848542774096e-05, 4.6148579713189974e-05, 4.5190976379672065e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data24[1*3*3*48] = { 
  /* [0][0][][] */ -87,80,-127,103,-101,88,-69,50,-62,-72,53,-22,33,-101,-59,-67,53,76,83,-105,91,-127,94,-88,-109,-75,86,91,-98,-42,-103,127,72,-94,49,-104,-54,-102,79,-23,28,-89,127,-89,97,83,-48,-56, -109,115,-54,111,-102,127,-60,100,-92,-91,81,-48,127,-121,-84,-76,76,114,127,-119,79,-116,104,-127,-95,-105,102,127,23,-72,-75,85,94,-127,73,-78,-51,-110,103,-81,-84,106,68,-40,-43,99,-55,-40, -69,95,1,42,-58,75,-49,47,-33,-34,50,-19,81,-113,-61,-39,35,57,66,-54,30,-97,70,-62,-98,-38,57,39,90,-26,-62,75,70,-91,33,-44,-6,-55,47,-54,-112,-61,94,-57,-78,96,-37,-57, 
  /* [0][1][][] */ -80,84,-58,123,-45,124,-127,74,-122,-97,70,-78,47,-111,-93,-97,84,95,-61,-118,97,-117,83,-81,-127,-84,77,81,-127,-98,-105,116,110,49,101,-127,-99,-127,96,-62,-104,-102,97,-92,127,88,-127,-79, -127,127,-82,127,-127,109,-124,127,-127,-127,127,-127,111,-127,-127,-127,127,127,-71,-127,127,-110,127,-115,-118,-127,127,97,24,-127,-127,38,127,50,127,-78,-127,-124,127,-127,-127,127,27,-76,-66,127,-69,-108, -77,120,-90,58,-94,53,-88,69,-64,-33,69,-64,72,-72,-85,-36,80,65,-49,-67,49,-81,71,-41,-109,-38,74,61,110,-42,-60,64,73,11,78,-62,-44,-47,59,-78,-70,-90,85,-70,-104,106,-56,-127, 
  /* [0][2][][] */ -34,29,0,73,-9,38,-76,-4,-63,-47,33,-54,35,-61,-35,-84,29,31,-93,-62,67,-60,46,-42,-101,-39,23,-3,-75,-43,-39,102,59,46,66,-79,-55,-72,37,-65,-116,-38,71,-89,76,48,-89,-91, -71,54,-87,59,-89,36,-99,23,-98,-69,66,-79,68,-70,-38,-54,49,55,-115,-65,57,-47,57,-50,-76,-63,51,23,11,-68,-47,81,55,55,74,-64,-74,-54,41,-109,-69,89,30,-127,-33,90,-46,-112, -35,87,-101,20,-61,26,-64,39,-39,-12,32,-25,50,-34,-14,-15,12,30,-78,-24,49,-39,31,-21,-64,-15,63,13,61,-37,4,47,39,45,42,-33,-16,-23,19,-83,-21,-48,54,-71,-67,79,-31,-91, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0033668023534119129, 0.0041818735189735889, 0.0030158509034663439, 0.0067187310196459293, 0.0039358306676149368, 0.0035408956464380026, 0.0017298595048487186, 0.0076961643062531948, 0.0057078222744166851, 0.0026249526999890804, 0.0026574407238513231, 0.0041741523891687393, 0.0027634743601083755, 0.003042860422283411, 0.0021232420112937689, 0.0024533523246645927, 0.0044544599950313568, 0.0020878422074019909, 0.0060126609168946743, 0.0016628558514639735, 0.0035165282897651196, 0.0027250936254858971, 0.0034195885527879, 0.004493046086281538, 0.002363838953897357, 0.0027368154842406511, 0.0023663339670747519, 0.002507122466340661, 0.010437514632940292, 0.0025279277469962835, 0.0023453664034605026, 0.0069709736853837967, 0.0031950694974511862, 0.0082431044429540634, 0.0046619209460914135, 0.0037207994610071182, 0.0052760043181478977, 0.0019989819265902042, 0.004526178352534771, 0.0037469151429831982, 0.0024307051207870245, 0.0090260934084653854, 0.0053458567708730698, 0.0035782866179943085, 0.006729563232511282, 0.0019153410103172064, 0.0019613145850598812, 0.0019206164870411158, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[48] = { 1965, -1177, 898, -1893, 3881, -726, 3044, -3678, 1318, 488, 2301, 4466, 480, -222, 838, 4592, -1306, 3053, 5288, 691, -635, 1951, -1231, 3906, 1687, 1852, 1079, -763, 8687, -302, 2432, -1967, -510, 4444, -869, 2317, 1606, 512, 800, 3456, 1312, 11612, -4419, 1586, 6830, 126, 3068, 1796, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00023059682280290872, 0.00033278041519224644, 0.00032395389280281961, 0.00025359311257489026, 0.00021432583162095398, 0.00023528393649030477, 0.00023672627867199481, 0.00014840994845144451, 0.00027130337548442185, 0.00038322509499266744, 0.00019807528587989509, 0.00018604757497087121, 0.0003469462099019438, 0.00033609147067181766, 0.00023748808598611504, 0.00016852181579452008, 0.00029729757807217538, 0.00023373126168735325, 0.00016862111806403846, 0.00035784346982836723, 0.00038127324660308659, 0.00027119924197904766, 0.00019795187108684331, 0.00020504189888015389, 0.00025716220261529088, 0.00022954687301535159, 0.00030647616949863732, 0.00033597098081372678, 0.00010807027865666896, 0.00030882016289979219, 0.00019132655870635062, 0.0001718470302876085, 0.00025009020464494824, 0.00017516431398689747, 0.00026676626293919981, 0.00025083954096771777, 0.00029195347451604903, 0.00027675318415276706, 0.0002326749381609261, 0.00022006874496582896, 0.00035277439747005701, 8.4171500930096954e-05, 0.00013102719094604254, 0.00029903629911132157, 0.00012987917580176145, 0.00027999011217616498, 0.00021313040633685887, 0.00026685671764425933, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ 64,33,127,-45,71,107,-91,-47, 
  /* [1][0][][] */ 5,-78,-127,5,49,23,28,5, 
  /* [2][0][][] */ -127,-1,-47,-25,50,29,-53,-29, 
  /* [3][0][][] */ 32,75,127,-69,2,-89,-16,-8, 
  /* [4][0][][] */ -127,23,-42,-19,46,8,-50,-48, 
  /* [5][0][][] */ -91,30,-62,-11,6,41,-77,-127, 
  /* [6][0][][] */ -53,-127,-111,41,100,8,8,36, 
  /* [7][0][][] */ -57,-127,-94,-76,-73,-63,28,83, 
  /* [8][0][][] */ 116,29,-44,-6,90,-106,-127,-1, 
  /* [9][0][][] */ -33,57,-58,91,-61,-40,127,-29, 
  /* [10][0][][] */ -20,127,35,59,118,-19,-13,57, 
  /* [11][0][][] */ -83,-54,-20,-6,-72,83,127,-15, 
  /* [12][0][][] */ 66,32,-127,31,-12,-29,-65,-17, 
  /* [13][0][][] */ 65,-35,-76,4,6,-127,-29,-29, 
  /* [14][0][][] */ -8,-71,81,26,127,-115,-65,16, 
  /* [15][0][][] */ -50,-52,4,127,74,78,-77,29, 
  /* [16][0][][] */ 106,34,-38,34,66,-110,-127,-28, 
  /* [17][0][][] */ 65,127,49,69,47,64,27,-82, 
  /* [18][0][][] */ 34,-3,-6,2,127,-4,20,-11, 
  /* [19][0][][] */ 12,127,32,12,-119,32,32,-30, 
  /* [20][0][][] */ -42,13,64,-127,15,38,-25,111, 
  /* [21][0][][] */ -53,75,50,-127,45,49,-12,124, 
  /* [22][0][][] */ -68,-58,-88,12,-127,109,115,-27, 
  /* [23][0][][] */ 101,32,-127,15,9,-39,-66,-11, 
  /* [24][0][][] */ -62,46,5,2,-9,86,-127,112, 
  /* [25][0][][] */ -100,-56,-127,5,-59,-61,69,96, 
  /* [26][0][][] */ 45,-3,-44,-35,106,-14,127,-39, 
  /* [27][0][][] */ 127,-62,17,84,-3,31,-11,98, 
  /* [28][0][][] */ 36,62,50,-22,127,-61,47,-28, 
  /* [29][0][][] */ -8,-14,-29,-43,-70,5,127,-49, 
  /* [30][0][][] */ 42,-127,-43,-71,-101,-17,10,-56, 
  /* [31][0][][] */ 11,23,-9,-13,-127,10,-22,-12, 
  /* [32][0][][] */ 41,-63,-62,81,-9,-94,127,-125, 
  /* [33][0][][] */ 74,127,66,54,71,-30,-16,-14, 
  /* [34][0][][] */ -127,-39,123,-7,-23,100,86,20, 
  /* [35][0][][] */ -28,81,127,-20,-82,-78,-45,32, 
  /* [36][0][][] */ -93,3,82,-23,-20,127,60,23, 
  /* [37][0][][] */ -24,-74,-4,-127,-35,-88,86,55, 
  /* [38][0][][] */ 48,-20,89,-52,62,48,-127,7, 
  /* [39][0][][] */ -4,86,-127,-36,-9,5,16,77, 
  /* [40][0][][] */ 63,-50,17,34,12,6,7,127, 
  /* [41][0][][] */ -30,118,127,-13,5,103,-122,15, 
  /* [42][0][][] */ 57,-124,-112,-24,-127,-1,10,-117, 
  /* [43][0][][] */ -15,-79,15,-46,127,-46,4,37, 
  /* [44][0][][] */ 2,127,121,21,1,53,-67,35, 
  /* [45][0][][] */ -35,47,11,81,-124,61,-127,22, 
  /* [46][0][][] */ -49,-41,58,44,-127,-116,-34,-6, 
  /* [47][0][][] */ -28,59,51,-127,-124,38,-18,61, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0024187653325498104, 0.0034905844368040562, 0.0033980018924921751, 0.0026599767152220011, 0.0022480962797999382, 0.0024679291527718306, 0.0024830580223351717, 0.0015566946240141988, 0.0028457425069063902, 0.0040197065100073814, 0.0020776418969035149, 0.0019514814484864473, 0.0036391715984791517, 0.0035253148525953293, 0.0024910487700253725, 0.001767651061527431, 0.0031183997634798288, 0.002451642882078886, 0.0017686926294118166, 0.0037534746807068586, 0.0039992332458496094, 0.0028446502983570099, 0.0020763473585247993, 0.0021507157944142818, 0.0026974135544151068, 0.0024077522102743387, 0.0032146752346307039, 0.0035240508150309324, 0.0011335656745359302, 0.0032392619177699089, 0.0020068534649908543, 0.0018025296740233898, 0.0026232341770082712, 0.0018373251659795642, 0.0027981519233435392, 0.0026310943067073822, 0.0030623446218669415, 0.0029029063880443573, 0.0024405629374086857, 0.0023083346895873547, 0.0037003045435994864, 0.00088288768893107772, 0.0013743641320616007, 0.0031366373877972364, 0.001362322480417788, 0.0029368589166551828, 0.0022355574183166027, 0.0027991009410470724, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data27[8] = { 882, -752, 22774, -5185, 1936, -13384, 2066, -15545, };
const TfArray<1, int> tensor_dimension27 = { 1, { 8 } };
const TfArray<8, float> quant27_scale = { 8, { 8.5869156464468688e-05, 0.00010752675734693184, 0.00015552442346233875, 0.00010165022104047239, 0.00012407463509589434, 0.00013720759307034314, 0.00010130440932698548, 0.00010832452244358137, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data28[8*1*1*48] = { 
  /* [0][0][][] */ -49,-55,-18,-78,-6,-21,92,96,-96,-90,-48,-2,-57,0,-65,39,-94,18,22,127,67,-22,27,112,85,82,34,7,-104,-67,-79,-44,-46,101,30,-44,7,-31,112,-7,18,5,4,-111,30,-28,-35,-90, 
  /* [1][0][][] */ -6,35,-25,-36,-62,64,-11,-53,-28,63,-15,18,55,38,-54,2,-13,-107,86,-52,127,18,-61,27,60,5,-68,59,37,-24,57,27,-31,-15,5,-9,1,92,-11,-16,46,35,-3,8,96,8,-24,63, 
  /* [2][0][][] */ -20,-39,110,-6,73,-38,-9,8,-30,-6,-5,47,4,-47,-45,-127,-48,-97,-12,13,-91,23,-29,-33,-46,25,3,-52,-43,12,-41,-17,4,1,33,-12,28,-33,-53,19,25,-41,25,-47,-40,-51,-59,-51, 
  /* [3][0][][] */ 52,10,62,3,26,-31,37,79,-48,-24,55,-25,-62,59,-24,58,63,37,-35,31,-106,-71,121,6,12,6,-54,-28,-59,67,127,-69,-1,-109,-23,49,-22,-85,-20,90,-78,-59,74,-3,-99,-68,66,-14, 
  /* [4][0][][] */ 30,-17,79,-36,6,-1,-4,1,-59,-8,-24,3,54,-83,41,-100,55,53,-1,-41,11,46,26,14,11,5,72,-27,32,29,-127,-18,-28,-25,10,29,49,-2,39,2,-34,-17,-83,26,-15,-104,6,34, 
  /* [5][0][][] */ 25,-46,56,40,34,22,21,-9,-77,-10,-45,36,27,1,19,-46,88,73,-2,-18,83,-57,127,-101,-23,41,4,45,12,11,-38,-58,-21,-46,-38,3,54,25,65,8,-65,28,24,29,50,-19,81,-8, 
  /* [6][0][][] */ -55,59,-116,95,48,7,27,24,-22,-13,60,-57,-85,-22,-32,31,-127,33,-10,87,32,44,-76,-94,-11,-10,18,84,-28,-33,-47,5,47,73,-46,-31,-8,-3,66,16,77,62,-125,-48,-25,121,-54,-41, 
  /* [7][0][][] */ 33,73,-64,18,30,53,105,57,41,69,-89,-4,-43,-1,-48,-37,19,44,127,85,77,9,119,11,100,110,-29,80,-63,19,-4,-58,9,-61,-16,14,4,79,-49,77,-48,36,-10,-58,65,-19,35,-35, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant28_scale = { 8, { 0.0036494391970336437, 0.0045698871836066246, 0.0066097881644964218, 0.0043201344087719917, 0.0052731717005372047, 0.0058313226327300072, 0.0043054372072219849, 0.0046037919819355011, } };
const TfArray<8, int> quant28_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data29[48] = { 38, 8693, -1432, -964, 2427, -1321, 249, -3529, -3023, -58, -3472, -58, 145, -1286, -3564, 3507, 5909, 2233, -16, -5716, -8527, -261, 18935, -5331, -438, -522, 5752, -7287, -366, -321, -7815, 8685, 1310, 585, 5147, 177, 12, -69, 11858, -2855, 6378, -3231, 4557, 4251, -684, 9979, 329, 1072, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.00027382106054574251, 0.0001623856951482594, 0.00079220457701012492, 0.00022212008479982615, 0.0001867534447228536, 0.00027020508423447609, 0.00034904316999018192, 0.00033047562465071678, 0.00012050906661897898, 0.00023009959841147065, 0.00029569523758254945, 0.0011071455664932728, 0.00060516694793477654, 0.00040739166433922946, 0.00028183389804325998, 0.00082386506255716085, 0.00019221840193495154, 7.0489732024725527e-05, 0.00024801917606964707, 0.00023419890203513205, 0.00024398104869760573, 0.00025297337560914457, 7.6861906563863158e-05, 0.00051111081847921014, 0.00021291925804689527, 0.00040457805152982473, 0.00047703951713629067, 0.00018337948131375015, 0.00038688757922500372, 0.00028776319231837988, 0.00017880259838420898, 0.00014057412045076489, 0.00021542512695305049, 0.00029926790739409626, 0.00012994174903724343, 0.00029682251624763012, 0.0019380736630409956, 0.00032777540036477149, 0.00014555692905560136, 0.00021299900254234672, 0.0001381443435093388, 0.00013455197040457278, 0.00024840940022841096, 0.00020429361029528081, 0.0003230533329769969, 8.0247933510690928e-05, 6.2312406953424215e-05, 0.00018852073117159307, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data30[1*3*3*48] = { 
  /* [0][0][][] */ -3,-72,11,11,-22,-103,-46,50,-46,-5,0,1,44,4,-5,7,81,-3,30,7,0,-3,-64,20,-15,-12,-2,-25,-52,72,-13,-109,61,-10,-67,-54,-11,-39,2,16,-19,44,4,-9,-17,56,127,1, -127,-117,-20,127,-77,64,-95,123,24,15,8,-6,53,26,4,-40,-27,62,9,7,2,127,14,127,116,-29,-47,36,68,-125,-8,-67,70,-10,-41,-122,26,8,-67,-43,-125,-5,-96,-127,35,57,58,107, -11,-17,12,16,-33,39,53,86,-12,-36,-4,4,-26,5,5,12,-65,47,-82,-19,-14,-11,127,21,-41,-11,8,12,14,39,12,-9,-7,-25,-36,61,4,1,3,82,31,-30,24,-40,-11,57,-20,-23, 
  /* [0][1][][] */ -11,23,-25,3,29,-107,127,-64,-12,7,19,28,127,25,9,-31,-25,-44,36,51,78,-55,35,16,-67,127,-75,-17,127,-94,45,-127,-21,-2,-100,24,5,-71,-48,7,123,127,5,-112,-70,-63,3,89, 98,-127,127,5,127,54,-59,-51,39,127,127,-127,-92,127,127,127,127,127,102,127,127,94,4,11,116,-91,-127,103,30,127,127,27,-127,127,127,127,-127,127,-127,-114,48,46,-127,-19,127,-127,-14,81, 22,65,-37,-1,-59,127,-104,127,101,-76,9,66,-45,15,22,-59,14,23,-127,32,30,-112,-25,-1,67,-22,-25,127,-80,-36,25,-47,-6,10,103,-24,34,-7,-1,-74,127,-3,34,48,-55,91,83,-83, 
  /* [0][2][][] */ -10,47,10,-28,-2,-73,-12,-11,-9,0,-17,-5,-11,1,-1,-4,-61,-2,40,-25,21,-20,69,-9,-127,9,36,-26,20,2,1,34,22,-18,-77,38,0,-20,4,58,-26,13,-2,18,-20,14,-10,13, 40,-13,-32,-32,23,51,123,-124,127,-29,-23,3,-69,-10,-21,-78,-16,83,24,27,27,20,-18,-30,-69,63,71,9,-90,17,-25,5,-2,-12,-48,3,60,-25,-4,127,-116,6,-24,69,39,54,10,-127, -4,45,6,-20,-19,18,-2,-59,-51,-22,-32,8,13,-3,-2,15,40,34,-33,-13,-6,-30,-34,-14,18,-30,14,10,-24,7,-4,19,57,-26,-25,-61,-3,6,31,43,-7,-27,-4,15,-14,11,45,-81, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.011637394316494465, 0.0069013917818665504, 0.033668693155050278, 0.0094401035457849503, 0.0079370215535163879, 0.01148371584713459, 0.014834334142506123, 0.014045213349163532, 0.0051216352730989456, 0.0097792325541377068, 0.012567047029733658, 0.047053683549165726, 0.025719594210386276, 0.017314145341515541, 0.011977939866483212, 0.035014264285564423, 0.0081692822277545929, 0.0029958134982734919, 0.010540815070271492, 0.0099534532055258751, 0.01036919467151165, 0.010751368477940559, 0.0032666309271007776, 0.021722208708524704, 0.0090490682050585747, 0.017194567248225212, 0.020274179056286812, 0.0077936276793479919, 0.016442721709609032, 0.012229935266077518, 0.0075991102494299412, 0.0059743998572230339, 0.0091555677354335785, 0.012718886137008667, 0.005522524006664753, 0.012614956125617027, 0.082368128001689911, 0.013930453918874264, 0.0061861691065132618, 0.0090524572879076004, 0.0058711343444883823, 0.0057184589095413685, 0.01055739913135767, 0.0086824782192707062, 0.013729766011238098, 0.0034105372615158558, 0.0026482772082090378, 0.0080121308565139771, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[48] = { 2262, 4508, 15621, 745, 1968, -1706, 6487, 18640, 3943, -860, 3351, -2388, 19302, -1562, 1725, 22701, -404, 1541, 104, 2970, 3481, 3102, 472, 16353, 5523, 3121, 9070, 1042, 6960, 4203, 551, 1128, 836, 2243, -216, -5, -3299, -359, 2405, 1827, 3474, 1841, 3090, 5066, 4164, 2219, 1612, 4945, };
const TfArray<1, int> tensor_dimension31 = { 1, { 48 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00023961090482771397, 0.0001851858978625387, 6.3398372731171548e-05, 0.00031404523178935051, 0.00025790193467400968, 0.00027140232850797474, 0.00012539267481770366, 5.5559652537340298e-05, 0.00014876434579491615, 0.00024483818560838699, 0.00025223675766028464, 0.00022019543393980712, 5.2010112995048985e-05, 0.00030603626510128379, 0.00027222395874559879, 4.8076883103931323e-05, 0.00030855365912429988, 0.00024744556867517531, 0.00035534097696654499, 0.00021018876577727497, 0.00021266480325721204, 0.00025032879784703255, 0.00038814364233985543, 6.3952677010092884e-05, 0.00015312347386498004, 0.0001654130028327927, 0.00011212666140636429, 0.00032788957469165325, 0.00011920170072698966, 0.00017827337433118373, 0.00062757445266470313, 0.00042137724813073874, 0.0002437980001559481, 0.00020103727001696825, 0.00033822856494225562, 0.00034673552727326751, 0.00018760751117952168, 0.00034121578210033476, 0.00026594981318339705, 0.00028109661070629954, 0.00022805645130574703, 0.00027580399182625115, 0.00025671283947303891, 0.00016823528858367354, 0.00019576393242459744, 0.00029639175045304, 0.0003820877755060792, 0.0001646761957090348, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ 67,113,-84,-127,-7,106,18,66, 
  /* [1][0][][] */ 68,-81,31,-127,-55,70,-82,-33, 
  /* [2][0][][] */ -25,127,117,46,111,8,52,15, 
  /* [3][0][][] */ 88,24,-92,69,1,-127,-107,-35, 
  /* [4][0][][] */ -50,29,-12,-96,-40,109,127,43, 
  /* [5][0][][] */ 8,62,-127,-66,34,71,9,-17, 
  /* [6][0][][] */ -15,127,60,46,115,12,15,-81, 
  /* [7][0][][] */ 127,-16,-32,27,5,8,102,17, 
  /* [8][0][][] */ 39,127,52,78,114,92,94,-70, 
  /* [9][0][][] */ 39,126,-127,-88,15,123,5,81, 
  /* [10][0][][] */ -53,-38,19,-55,-10,-25,-52,127, 
  /* [11][0][][] */ 9,-111,-127,-18,28,-2,48,-3, 
  /* [12][0][][] */ -14,-91,-100,-17,-127,29,-63,20, 
  /* [13][0][][] */ -13,10,-100,97,-127,-23,0,-12, 
  /* [14][0][][] */ -55,-39,-127,-10,33,-9,-12,-55, 
  /* [15][0][][] */ 11,-127,-124,9,-103,-33,-33,-3, 
  /* [16][0][][] */ 127,-72,-20,73,-91,30,40,115, 
  /* [17][0][][] */ -24,107,127,-11,-44,-24,-26,-31, 
  /* [18][0][][] */ 13,-127,13,31,-31,-31,46,-79, 
  /* [19][0][][] */ 127,-45,-70,26,-97,4,41,95, 
  /* [20][0][][] */ -26,-127,85,79,-13,-99,-4,-79, 
  /* [21][0][][] */ 0,-67,-2,-31,127,-8,52,7, 
  /* [22][0][][] */ -127,29,-80,51,55,50,-85,-108, 
  /* [23][0][][] */ -77,-50,54,-20,-116,126,127,-63, 
  /* [24][0][][] */ -8,41,-10,-91,-60,114,127,-34, 
  /* [25][0][][] */ -59,-127,-108,-60,-47,-18,-15,-62, 
  /* [26][0][][] */ -14,40,-11,127,-85,43,-39,-1, 
  /* [27][0][][] */ 12,-127,38,87,11,-60,-18,-126, 
  /* [28][0][][] */ 31,127,71,49,93,-26,19,-56, 
  /* [29][0][][] */ 124,41,-77,-31,59,-127,-124,6, 
  /* [30][0][][] */ 26,-7,30,-127,16,-19,19,-25, 
  /* [31][0][][] */ 42,-44,4,63,-15,22,13,127, 
  /* [32][0][][] */ -56,-109,9,-80,-65,127,75,59, 
  /* [33][0][][] */ -40,60,52,-36,40,127,-119,69, 
  /* [34][0][][] */ 20,127,-64,-40,25,46,-59,73, 
  /* [35][0][][] */ 16,-127,34,39,-36,-25,48,-93, 
  /* [36][0][][] */ -19,-29,-88,-13,-127,-66,-35,25, 
  /* [37][0][][] */ -49,-127,73,88,-46,-80,-4,-45, 
  /* [38][0][][] */ -71,17,60,-72,-127,-81,-54,82, 
  /* [39][0][][] */ 62,-127,80,54,-17,-63,-15,-87, 
  /* [40][0][][] */ -11,71,19,44,-127,-2,-59,10, 
  /* [41][0][][] */ 113,127,-84,-103,58,21,3,19, 
  /* [42][0][][] */ -14,-35,-12,16,127,9,43,18, 
  /* [43][0][][] */ 127,25,93,23,-72,-25,66,116, 
  /* [44][0][][] */ 46,26,-34,6,59,-105,-127,37, 
  /* [45][0][][] */ 45,9,10,18,61,-127,-16,-64, 
  /* [46][0][][] */ 56,-32,-5,127,39,49,14,73, 
  /* [47][0][][] */ -73,-74,38,69,-83,25,127,-90, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.0030449572950601578, 0.0023533282801508904, 0.00080566172255203128, 0.0039908629842102528, 0.0032773984130471945, 0.0034489603713154793, 0.0015934807015582919, 0.00070604786742478609, 0.0018904859898611903, 0.0031113852746784687, 0.0032054057810455561, 0.0027982268948107958, 0.0006609405972994864, 0.0038890857249498367, 0.0034594014286994934, 0.00061095738783478737, 0.0039210766553878784, 0.0031445196364074945, 0.0045156460255384445, 0.0026710629463195801, 0.0027025281451642513, 0.0031811592634767294, 0.0049324999563395977, 0.00081270578084513545, 0.0019458815222606063, 0.0021020558197051287, 0.0014248971128836274, 0.0041667958721518517, 0.0015148061793297529, 0.0022654845379292965, 0.0079751685261726379, 0.0053548300638794899, 0.0030981665477156639, 0.0025547663681209087, 0.0042981831356883049, 0.0044062887318432331, 0.0023841019719839096, 0.0043361443094909191, 0.0033796702045947313, 0.0035721543245017529, 0.0028981240466237068, 0.0035048960708081722, 0.0032622874714434147, 0.0021379212848842144, 0.0024877532850950956, 0.0037665239069610834, 0.0048555424436926842, 0.0020926925353705883, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[8] = { 8194, 13812, -3760, 6094, -1260, 4749, -11009, -19808, };
const TfArray<1, int> tensor_dimension33 = { 1, { 8 } };
const TfArray<8, float> quant33_scale = { 8, { 0.00022312751389108598, 0.00010569059668341652, 0.00014772303984500468, 0.00011744575022021309, 0.00017656691488809884, 0.00014522913261316717, 0.00021086477499920875, 0.00013181053509470075, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data34[8*1*1*48] = { 
  /* [0][0][][] */ -44,-4,31,6,-33,-17,11,9,-39,1,-66,-56,-25,-67,-17,-30,46,-40,40,43,-14,33,-37,13,0,-42,58,-14,-5,-23,18,10,82,37,44,-127,17,-4,-16,-35,7,-22,45,48,35,1,28,-3, 
  /* [1][0][][] */ 4,34,60,-23,-14,51,-51,-33,-2,19,-20,-90,14,93,-16,61,-12,17,-22,-49,3,-81,-32,28,-78,-12,-1,-109,-29,-11,36,-68,43,72,-44,8,127,-23,5,41,-32,42,-78,-28,116,-16,-29,-23, 
  /* [2][0][][] */ -2,-23,-65,20,2,49,23,-1,-15,38,-4,28,63,-93,13,-64,30,-88,24,39,-31,50,-12,28,-18,59,-19,-63,13,1,17,-74,-54,-90,34,-33,107,28,-7,-60,-12,36,79,21,127,17,18,28, 
  /* [3][0][][] */ 1,21,-68,39,16,-31,-66,-100,20,-12,-34,1,6,32,28,76,-4,12,-33,27,1,-96,29,-59,-67,-7,127,-14,-39,9,-64,7,-3,-76,18,-9,-15,-39,-22,98,-43,-36,2,21,43,10,-36,39, 
  /* [4][0][][] */ -24,-51,-7,11,32,-27,-13,-11,29,-28,60,-80,6,27,10,9,-19,-25,16,-11,-4,-54,3,-16,14,-11,42,47,33,22,-12,26,-13,-3,5,2,-66,85,40,-30,30,-18,-19,-21,-74,14,127,13, 
  /* [5][0][][] */ 50,-24,6,18,31,-42,33,-127,21,-35,-10,111,-80,69,27,-66,0,-90,17,-4,-42,62,-46,-57,-60,79,-24,4,-17,52,-46,-33,21,50,35,-9,-38,-3,-39,-45,12,-38,-53,-4,-34,53,91,23, 
  /* [6][0][][] */ 57,-25,21,-15,-42,-23,-39,21,-47,7,-42,127,-43,-40,-7,56,11,48,17,37,38,-85,-21,21,22,35,-65,7,6,-49,15,41,2,15,-15,2,7,2,3,-6,-7,-17,43,61,-5,-38,74,-19, 
  /* [7][0][][] */ -27,-2,-9,69,38,30,4,30,26,7,67,-2,127,103,61,50,51,44,-13,3,18,-23,-84,-28,13,0,-24,68,31,-33,-35,-18,33,4,44,-92,-70,42,44,52,-25,37,86,123,-58,-37,-103,58, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant34_scale = { 8, { 0.0094829192385077477, 0.0044918502680957317, 0.0062782289460301399, 0.004991444293409586, 0.0075040934607386589, 0.0061722379177808762, 0.0089617529883980751, 0.0056019476614892483, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data35[48] = { 13772, 8508, 5210, 1179, -1467, -1248, -1183, 32790, -125, 3507, 5083, 54751, 307, -19, -90, 12218, -2318, 14149, 410, 8765, 12493, -154, 5273, -9000, 12738, 1613, -153, 13127, -451, -1267, -9499, 13937, 6105, 3623, 521, 2543, -9172, 4981, 510, 18803, 1247, -1135, 1220, -1618, 152, -679, 1287, -196, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 9.17976358323358e-05, 0.00010106666741194203, 0.00021455367095768452, 0.00013444323849398643, 0.00058715534396469593, 0.00015449312923010439, 0.00014189918874762952, 0.00010375597776146606, 0.00012304552365094423, 7.7783079177606851e-05, 7.34781424398534e-05, 5.0897706387331709e-05, 0.0001003903744276613, 7.6324802648741752e-05, 0.00018423089932184666, 0.00012895317922811955, 0.00014343667135108262, 0.00039908281178213656, 0.00017723636119626462, 0.00016251920897047967, 0.00011785722017521039, 0.00029933406040072441, 0.00016064771625678986, 0.00027542150928638875, 0.00012858812988270074, 8.5057014075573534e-05, 5.7017208746401593e-05, 0.00010323238529963419, 0.00014410099538508803, 0.00091746484395116568, 0.0002692400012165308, 7.7797296398784965e-05, 0.00013181650137994438, 0.00019095788593403995, 0.00023356998281087726, 7.8258235589601099e-05, 9.9706528999377042e-05, 5.8739609812619165e-05, 0.00010219139949185774, 7.1634945925325155e-05, 0.00019285207963548601, 0.00016508511907886714, 8.8650194811634719e-05, 0.00011111423373222351, 7.2899892984423786e-05, 0.00033374610939063132, 5.8194054872728884e-05, 0.00015481277660001069, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data36[1*3*3*48] = { 
  /* [0][0][][] */ -16,-110,-3,-24,127,-57,80,-62,-84,-81,-20,-44,127,49,62,-98,57,-22,2,-20,-86,95,2,16,-30,66,72,-38,76,-69,14,-69,-118,-72,37,69,24,79,123,-68,-126,-24,28,70,38,-127,93,85, -34,-124,-60,43,-73,108,75,-63,-56,34,69,-109,117,92,109,-54,-71,-100,35,-40,-85,92,-43,93,-77,82,109,-111,94,-49,6,-115,-52,-59,71,124,114,127,126,-70,-127,-54,74,84,72,108,108,93, -5,-72,-40,98,-37,-22,40,-5,95,16,57,-54,20,54,-40,17,-75,-19,36,-56,-28,17,-85,-3,-85,48,45,-84,34,56,97,-69,24,3,-8,41,64,87,37,-8,-26,101,68,33,48,28,28,-109, 
  /* [0][1][][] */ -95,-93,-16,-81,-72,-80,80,-112,-127,-127,78,-58,103,62,-126,-78,127,-127,-65,-50,-104,127,-52,16,-16,90,96,-45,-106,-76,8,-73,-102,-127,-127,63,39,79,14,-93,49,-32,76,127,91,108,118,-127, -115,-127,-127,-106,-23,127,127,-127,79,59,127,-127,116,127,62,-127,58,-100,-127,-127,-127,108,-127,127,-125,127,127,-127,-127,127,-12,-127,-127,-92,41,127,127,108,-8,-127,87,-88,127,123,127,-1,127,105, -58,-74,-97,127,71,-37,49,-41,60,20,26,-66,5,68,76,-60,-12,2,-14,-83,-51,25,-80,-20,-127,63,46,-85,-50,38,127,-94,-42,-4,58,73,91,62,-28,-22,36,127,80,16,63,-47,35,13, 
  /* [0][2][][] */ -127,-58,13,1,-43,-30,21,-51,24,-51,28,-23,6,34,-46,-35,-77,-21,89,-26,-36,62,-70,-7,-13,73,72,-24,39,58,-2,-21,28,-71,-45,29,18,28,-66,-38,11,-4,31,48,40,54,23,-76, -126,-66,-45,-82,91,43,60,-58,85,16,-24,-54,3,47,-127,-91,36,13,45,-75,-34,54,-58,53,-67,75,74,-38,43,5,-24,-44,-44,-19,-63,62,22,31,-127,-61,17,-33,56,71,57,-105,34,-3, -60,-58,-64,-25,-5,-5,27,-19,-68,7,7,-19,-26,15,38,-38,32,48,-3,-53,-13,13,-15,-28,-56,25,30,-25,13,-63,45,-40,-81,-3,20,47,20,26,-92,-32,-5,36,19,21,34,-4,20,31, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0039013994392007589, 0.0042953332886099815, 0.0091185308992862701, 0.0057138376869261265, 0.024954101070761681, 0.0065659577958285809, 0.00603071553632617, 0.0044096289202570915, 0.0052294349297881126, 0.0033057807013392448, 0.0031228209845721722, 0.0021631524432450533, 0.0042665908113121986, 0.0032438039779663086, 0.0078298132866621017, 0.0054805101826786995, 0.0060960585251450539, 0.016961019486188889, 0.0075325448997318745, 0.0069070663303136826, 0.0050089317373931408, 0.012721696868538857, 0.0068275276571512222, 0.011705413460731506, 0.0054649952799081802, 0.0036149229854345322, 0.0024232312571257353, 0.0043873763643205166, 0.0061242920346558094, 0.038992255926132202, 0.011442700400948524, 0.0033063851296901703, 0.0056022009812295437, 0.0081157097592949867, 0.0099267242476344109, 0.0033259750343859196, 0.0042375274933874607, 0.0024964334443211555, 0.0043431343510746956, 0.0030444851145148277, 0.0081962132826447487, 0.0070161172188818455, 0.0037676331121474504, 0.0047223549336194992, 0.0030982454773038626, 0.014184209518134594, 0.0024732472375035286, 0.0065795429982244968, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[48] = { 1148, -402, -412, 1306, 13786, 1591, -412, 4552, 1356, 1296, 184, 1725, 976, 463, -1016, 341, 2970, 14302, 2838, -647, 872, -1094, -85, 2453, -312, -714, 1573, 13, 3543, 10766, 2300, -25, 447, -37, 2425, -130, 484, -264, 1156, 1039, 1678, 1597, 227, -324, 721, 1893, 1106, -196, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00044733041431754827, 0.00044083161628805101, 0.00032165946322493255, 0.00029012680170126259, 7.3458679253235459e-05, 0.00039302717777900398, 0.00054123357404023409, 0.00019736030662897974, 0.0003100779140368104, 0.00055539823370054364, 0.00034322493593208492, 0.00046949903480708599, 0.00023315742146223783, 0.00038883663364686072, 0.00029669859213754535, 0.00041547237196937203, 0.00025096844183281064, 6.9525711296591908e-05, 0.00026711108512245119, 0.00035967689473181963, 0.00044362235348671675, 0.00023583542497362942, 0.00046056279097683728, 0.0003163661458529532, 0.00044386737863533199, 0.00080749898916110396, 0.00033636073931120336, 0.00084063975373283029, 0.00023520461400039494, 9.1472946223802865e-05, 0.00032121720141731203, 0.00083332759095355868, 0.00044299144065007567, 0.00043891117093153298, 0.00032015042961575091, 0.000343375897500664, 0.00042187591316178441, 0.00056288181804120541, 0.00039786251727491617, 0.00059217208763584495, 0.00034664978738874197, 0.00039025928708724678, 0.00034502550261095166, 0.00044880254426971078, 0.00038672081427648664, 0.00027738270000554621, 0.0003276211500633508, 0.00032211479265242815, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ -41,26,2,-17,-82,-27,-127,32, 
  /* [1][0][][] */ 77,-71,-50,-55,127,-87,98,21, 
  /* [2][0][][] */ -104,127,-53,-124,58,-15,-10,43, 
  /* [3][0][][] */ 70,21,99,12,102,127,122,-14, 
  /* [4][0][][] */ -107,-127,79,20,-87,-114,-24,-33, 
  /* [5][0][][] */ 127,-20,70,61,-84,-2,-2,-10, 
  /* [6][0][][] */ 25,32,127,-31,39,-39,-45,26, 
  /* [7][0][][] */ 35,2,-127,-32,-46,109,110,-78, 
  /* [8][0][][] */ 6,117,-31,28,78,127,62,56, 
  /* [9][0][][] */ 3,127,-38,82,27,-93,31,101, 
  /* [10][0][][] */ -6,-127,-6,-26,-76,-125,-53,-81, 
  /* [11][0][][] */ -127,-81,96,61,-9,-61,95,64, 
  /* [12][0][][] */ -19,52,-127,71,41,-58,-78,94, 
  /* [13][0][][] */ 95,-127,99,94,16,38,50,-55, 
  /* [14][0][][] */ -30,104,-45,-116,-37,-127,-38,-54, 
  /* [15][0][][] */ 39,98,34,-17,24,-62,84,-127, 
  /* [16][0][][] */ -121,-127,-52,83,-63,29,-31,89, 
  /* [17][0][][] */ -31,-121,-127,86,-61,94,-53,81, 
  /* [18][0][][] */ -97,-79,-55,94,-10,66,-6,127, 
  /* [19][0][][] */ 59,-123,104,-127,5,-71,28,-34, 
  /* [20][0][][] */ -3,57,31,19,35,127,70,-9, 
  /* [21][0][][] */ 28,107,48,-34,34,-70,87,-127, 
  /* [22][0][][] */ 13,12,107,21,-9,127,39,-36, 
  /* [23][0][][] */ -83,-58,36,-75,85,92,-62,-127, 
  /* [24][0][][] */ -87,-98,38,-81,107,109,-42,-127, 
  /* [25][0][][] */ 127,4,-66,-11,-2,36,-66,-7, 
  /* [26][0][][] */ -118,-32,-127,-23,-46,-30,25,-4, 
  /* [27][0][][] */ 85,32,-1,-58,-127,-21,84,88, 
  /* [28][0][][] */ -127,-94,14,59,-91,-101,-3,4, 
  /* [29][0][][] */ 99,107,21,-127,42,32,-51,-63, 
  /* [30][0][][] */ -71,-64,40,-67,72,87,-56,-127, 
  /* [31][0][][] */ 50,37,-3,127,-6,-67,6,6, 
  /* [32][0][][] */ -25,127,3,34,20,65,-17,44, 
  /* [33][0][][] */ -39,127,-66,22,26,-34,-15,-4, 
  /* [34][0][][] */ -127,-111,-48,104,-26,9,26,70, 
  /* [35][0][][] */ -43,127,-32,-3,72,111,58,73, 
  /* [36][0][][] */ 56,22,0,-40,-127,-14,101,105, 
  /* [37][0][][] */ -72,111,24,27,-127,108,-21,-99, 
  /* [38][0][][] */ 25,45,11,23,127,51,92,48, 
  /* [39][0][][] */ -23,-80,53,-23,14,44,-107,127, 
  /* [40][0][][] */ -50,-67,-73,127,-12,-3,23,65, 
  /* [41][0][][] */ 127,5,62,87,-48,3,7,-11, 
  /* [42][0][][] */ -46,9,-74,-127,55,-113,8,83, 
  /* [43][0][][] */ 23,-1,85,-15,42,127,86,9, 
  /* [44][0][][] */ -26,-31,-73,127,43,13,-43,-39, 
  /* [45][0][][] */ 31,127,80,-112,42,-57,21,-98, 
  /* [46][0][][] */ -41,-127,-42,34,-14,29,-61,108, 
  /* [47][0][][] */ 55,34,121,8,82,108,127,-31, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.00428786501288414, 0.0042255711741745472, 0.0030832518823444843, 0.0027809969615191221, 0.00070413475623354316, 0.0037673439364880323, 0.0051879691891372204, 0.0018917880952358246, 0.0029722375329583883, 0.0053237439133226871, 0.0032899666111916304, 0.0045003611594438553, 0.0022349196951836348, 0.0037271755281835794, 0.0028439906891435385, 0.0039824913255870342, 0.0024056462571024895, 0.00066643551690503955, 0.0025603810790926218, 0.0034476662985980511, 0.0042523215524852276, 0.0022605895064771175, 0.004414703231304884, 0.0030325129628181458, 0.0042546703480184078, 0.0077402442693710327, 0.0032241703011095524, 0.0080579137429594994, 0.0022545428946614265, 0.00087680970318615437, 0.0030790125019848347, 0.0079878233373165131, 0.004246274009346962, 0.0042071626521646976, 0.003068787045776844, 0.0032914136536419392, 0.0040438720025122166, 0.0053954776376485825, 0.0038136928342282772, 0.0056762383319437504, 0.0033227954991161823, 0.0037408124189823866, 0.0033072258811444044, 0.0043019759468734264, 0.0037068943493068218, 0.0026588391046971083, 0.0031403973698616028, 0.0030876165255904198, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[8] = { -7187, -2500, 11076, -9635, 23180, 7485, -7485, 10358, };
const TfArray<1, int> tensor_dimension39 = { 1, { 8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.00016012223204597831, 0.0002091465430567041, 0.00018293614266440272, 0.00021408163593150675, 0.00015737611101940274, 0.00016455413424409926, 0.00016788316133897752, 0.00025048520183190703, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data40[8*1*1*16] = { 
  /* [0][0][][] */ -13,-12,-18,-65,-24,-35,16,-17,40,2,-28,-5,113,127,-16,-100, 
  /* [1][0][][] */ 127,-59,-43,17,-49,68,-69,-40,-39,79,-32,-54,-7,4,-63,-19, 
  /* [2][0][][] */ -35,-99,39,46,41,-55,-68,-12,23,-85,24,-127,40,-20,-76,23, 
  /* [3][0][][] */ 36,13,17,13,-8,70,-50,-23,127,46,12,24,4,-15,13,21, 
  /* [4][0][][] */ -99,-40,-30,-127,-14,36,61,-116,32,-19,-49,-43,-120,34,-42,-28, 
  /* [5][0][][] */ 84,49,69,-33,47,-45,-118,-127,-17,-74,67,47,-56,46,64,-45, 
  /* [6][0][][] */ 104,37,-118,-68,19,-73,2,-89,-38,16,-127,89,89,-83,6,72, 
  /* [7][0][][] */ -127,-3,96,-35,-62,5,0,-62,-52,64,82,-31,60,-28,27,25, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant40_scale = { 8, { 0.0068051950074732304, 0.0088887279853224754, 0.0077747860923409462, 0.0090984692797064781, 0.0066884844563901424, 0.0069935503415763378, 0.0071350340731441975, 0.01064562052488327, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data41[16] = { 23864, -915, -320, 3748, -291, 230, 12545, 1108, -743, 191, -1943, 2441, -2181, -524, -807, -1249, };
const TfArray<1, int> tensor_dimension41 = { 1, { 16 } };
const TfArray<16, float> quant41_scale = { 16, { 9.360367403132841e-05, 0.00019622055697254837, 0.00016580830560997128, 0.00018679203640203923, 0.0010944714304059744, 0.00079332600580528378, 0.00013754253450315446, 0.00087907712440937757, 0.00024568988010287285, 0.001119168708100915, 0.00020987917378079146, 0.0001884758094092831, 0.00011106617603218183, 0.00024253329320345074, 0.00020128535106778145, 0.00045092255459167063, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data42[1*3*3*16] = { 
  /* [0][0][][] */ -7,-4,3,4,-20,11,1,16,-8,-11,0,-4,3,-8,8,-1, -5,-1,-2,3,11,-2,5,-26,-5,9,-6,92,-6,20,9,-1, -5,-4,-7,3,-1,-14,-7,11,10,2,-5,-7,5,-5,0,-1, 
  /* [0][1][][] */ 10,-8,0,2,127,-24,-127,-21,127,127,-2,-1,110,-24,-1,-20, -127,127,127,-2,-90,-91,-20,-101,20,-105,127,127,127,127,127,127, 16,-3,-5,0,-13,127,-2,-9,8,-13,-6,0,10,-4,-10,-10, 
  /* [0][2][][] */ -2,-3,6,-16,-19,16,45,7,-13,-8,-2,5,-10,1,-3,-12, 22,-13,-2,-127,6,-16,-15,127,-2,1,0,-12,-6,-57,-7,-38, 3,-2,2,-4,-2,-4,-3,-1,9,2,-5,4,7,-5,-2,-13, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0039781560190021992, 0.0083393733948469162, 0.0070468527264893055, 0.0079386616125702858, 0.046515036374330521, 0.033716354519128799, 0.0058455574326217175, 0.037360776215791702, 0.010441819205880165, 0.047564670443534851, 0.0089198648929595947, 0.0080102216452360153, 0.0047203125432133675, 0.010307664982974529, 0.0085546271875500679, 0.019164208322763443, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data43[16] = { 1943, 777, 343, 1568, 71708, 51362, 4848, 1660, 4483, 1605, 1101, 85, 5780, -21639, 452, 43517, };
const TfArray<1, int> tensor_dimension43 = { 1, { 16 } };
const TfArray<16, float> quant43_scale = { 16, { 0.00020742681226693094, 0.00063903781119734049, 0.00024050351930782199, 0.00016024723299778998, 2.321810279681813e-05, 3.4292006603209302e-05, 0.00013859494356438518, 2.3574830265715718e-05, 0.00017673407273832709, 3.2727410143706948e-05, 0.00038577016675844789, 0.00055261532543227077, 0.00027203539502806962, 1.9712681023520418e-05, 0.00049310410395264626, 4.7103869292186573e-05, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data44[16*3*3*1] = { 
  /* [0][0][][] */ -86, -111, -31, 
  /* [0][1][][] */ 66, -38, 15, 
  /* [0][2][][] */ 31, 127, 18, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -2, -14, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -80, 
  /* [3][0][][] */ 120, 126, 58, 
  /* [3][1][][] */ 2, -22, -15, 
  /* [3][2][][] */ -101, -127, -44, 
  /* [4][0][][] */ 22, -74, -14, 
  /* [4][1][][] */ 31, -127, -3, 
  /* [4][2][][] */ 20, -89, -27, 
  /* [5][0][][] */ -62, 36, -10, 
  /* [5][1][][] */ -127, 41, -4, 
  /* [5][2][][] */ -91, 30, -9, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -37, -52, -89, 
  /* [7][0][][] */ 34, 28, -13, 
  /* [7][1][][] */ 127, 82, 2, 
  /* [7][2][][] */ 58, 28, -6, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -24, 55, 6, 
  /* [9][1][][] */ -19, 127, 4, 
  /* [9][2][][] */ -3, 96, 5, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -40, 50, -9, 
  /* [12][1][][] */ -127, 115, 7, 
  /* [12][2][][] */ -78, 80, 6, 
  /* [13][0][][] */ 71, 21, -13, 
  /* [13][1][][] */ 123, 108, -8, 
  /* [13][2][][] */ 91, 127, 43, 
  /* [14][0][][] */ -31, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 80, 
  /* [15][0][][] */ -87, -19, 25, 
  /* [15][1][][] */ -127, -126, 17, 
  /* [15][2][][] */ -19, -79, -11, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant44_scale = { 16, { 0.052893832325935364, 0.16295462846755981, 0.06132839247584343, 0.040863040834665298, 0.00592061597853899, 0.0087444614619016647, 0.035341709852218628, 0.006011581514030695, 0.045067187398672104, 0.008345489390194416, 0.098371386528015137, 0.14091689884662628, 0.069369018077850342, 0.0050267335027456284, 0.12574154138565063, 0.012011486105620861, } };
const TfArray<16, int> quant44_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,90,90,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,90,90,16 } };
const TfArray<1, float> quant46_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,90,90,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.10432474315166473, } };
const TfArray<1, int> quant47_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,90,90,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,91,91,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,45,45,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,45,45,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.078691057860851288, } };
const TfArray<1, int> quant51_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,45,45,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,45,45,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,45,45,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.085839889943599701, } };
const TfArray<1, int> quant54_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,45,45,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.095336586236953735, } };
const TfArray<1, int> quant55_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,45,45,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,47,47,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,23,23,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,23,23,16 } };
const TfArray<1, float> quant59_scale = { 1, { 0.062946565449237823, } };
const TfArray<1, int> quant59_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,23,23,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,23,23,96 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,23,23,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069632455706596375, } };
const TfArray<1, int> quant62_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,23,23,16 } };
const TfArray<1, float> quant63_scale = { 1, { 0.08824494481086731, } };
const TfArray<1, int> quant63_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,23,23,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,23,23,96 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,23,23,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.056771982461214066, } };
const TfArray<1, int> quant66_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,23,23,16 } };
const TfArray<1, float> quant67_scale = { 1, { 0.10506714135408401, } };
const TfArray<1, int> quant67_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,23,23,96 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,23,23,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.051790047436952591, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,23,23,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.18209967017173767, } };
const TfArray<1, int> quant70_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,23,23,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,44,43 } };
const TfArray<1, int> outputs0 = { 1, { 45 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 45,42,41 } };
const TfArray<1, int> outputs1 = { 1, { 46 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 46,40,39 } };
const TfArray<1, int> outputs2 = { 1, { 47 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 47,38,37 } };
const TfArray<1, int> outputs3 = { 1, { 48 } };
const TfArray<2, int> inputs4 = { 2, { 48,1 } };
const TfArray<1, int> outputs4 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 49,36,35 } };
const TfArray<1, int> outputs5 = { 1, { 50 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 50,34,33 } };
const TfArray<1, int> outputs6 = { 1, { 51 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 51,32,31 } };
const TfArray<1, int> outputs7 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 52,30,29 } };
const TfArray<1, int> outputs8 = { 1, { 53 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 53,28,27 } };
const TfArray<1, int> outputs9 = { 1, { 54 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 51,54 } };
const TfArray<1, int> outputs10 = { 1, { 55 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 55,26,25 } };
const TfArray<1, int> outputs11 = { 1, { 56 } };
const TfArray<2, int> inputs12 = { 2, { 56,2 } };
const TfArray<1, int> outputs12 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 57,24,23 } };
const TfArray<1, int> outputs13 = { 1, { 58 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 58,22,21 } };
const TfArray<1, int> outputs14 = { 1, { 59 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 59,20,19 } };
const TfArray<1, int> outputs15 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 60,18,17 } };
const TfArray<1, int> outputs16 = { 1, { 61 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 61,16,15 } };
const TfArray<1, int> outputs17 = { 1, { 62 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 59,62 } };
const TfArray<1, int> outputs18 = { 1, { 63 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 63,14,13 } };
const TfArray<1, int> outputs19 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 64,12,11 } };
const TfArray<1, int> outputs20 = { 1, { 65 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 65,10,9 } };
const TfArray<1, int> outputs21 = { 1, { 66 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 63,66 } };
const TfArray<1, int> outputs22 = { 1, { 67 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 67,8,7 } };
const TfArray<1, int> outputs23 = { 1, { 68 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 68,6,5 } };
const TfArray<1, int> outputs24 = { 1, { 69 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 69,4,3 } };
const TfArray<1, int> outputs25 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 70 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 32400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 129600), (TfLiteIntArray*)&g0::tensor_dimension45, 129600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension46, 129600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 129600), (TfLiteIntArray*)&g0::tensor_dimension47, 64800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 397488), (TfLiteIntArray*)&g0::tensor_dimension48, 388800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 397488, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 397488), (TfLiteIntArray*)&g0::tensor_dimension50, 97200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 194400), (TfLiteIntArray*)&g0::tensor_dimension51, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 97200), (TfLiteIntArray*)&g0::tensor_dimension52, 97200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 97200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 97200), (TfLiteIntArray*)&g0::tensor_dimension54, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 16200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 106032), (TfLiteIntArray*)&g0::tensor_dimension56, 97200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 106032, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 106032), (TfLiteIntArray*)&g0::tensor_dimension58, 25392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 131424), (TfLiteIntArray*)&g0::tensor_dimension59, 8464, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 50784), (TfLiteIntArray*)&g0::tensor_dimension60, 50784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 50784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 50784), (TfLiteIntArray*)&g0::tensor_dimension62, 8464, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 101568), (TfLiteIntArray*)&g0::tensor_dimension63, 8464, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 50784), (TfLiteIntArray*)&g0::tensor_dimension64, 50784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 50784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 59248), (TfLiteIntArray*)&g0::tensor_dimension66, 8464, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 50784), (TfLiteIntArray*)&g0::tensor_dimension67, 8464, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 50784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 50784), (TfLiteIntArray*)&g0::tensor_dimension69, 16928, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1072), (TfLiteIntArray*)&g0::tensor_dimension70, 1058, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 1058, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
